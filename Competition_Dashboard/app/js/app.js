/*!
 * 
 * Angle - Bootstrap Admin App + AngularJS
 * 
 * Version: 3.2.0
 * Author: @themicon_co
 * Website: http://themicon.co
 * License: https://wrapbootstrap.com/help/licenses
 * 
 */
!function(){"use strict";angular.module("angle",["app.core","app.routes","app.sidebar","app.navsearch","app.preloader","app.loadingbar","app.translate","app.settings","app.dashboard","app.icons","app.flatdoc","app.notify","app.bootstrapui","app.elements","app.panels","app.charts","app.forms","app.locale","app.maps","app.pages","app.tables","app.extras","app.mailbox","app.utils"])}(),function(){"use strict";angular.module("app.bootstrapui",[])}(),function(){"use strict";angular.module("app.charts",[])}(),function(){"use strict";angular.module("app.colors",[])}(),function(){"use strict";angular.module("app.core",["ngRoute","ngAnimate","ngStorage","ngCookies","pascalprecht.translate","ui.bootstrap","ui.router","oc.lazyLoad","cfp.loadingBar","ngSanitize","ngResource","tmh.dynamicLocale","ui.utils"])}(),function(){"use strict";angular.module("app.dashboard",[])}(),function(){"use strict";angular.module("app.elements",[])}(),function(){"use strict";angular.module("app.extras",[])}(),function(){"use strict";angular.module("app.flatdoc",[])}(),function(){"use strict";angular.module("app.forms",[])}(),function(){"use strict";angular.module("app.lazyload",[])}(),function(){"use strict";angular.module("app.icons",[])}(),function(){"use strict";angular.module("app.locale",[])}(),function(){"use strict";angular.module("app.loadingbar",[])}(),function(){"use strict";angular.module("app.mailbox",[])}(),function(){"use strict";angular.module("app.maps",[])}(),function(){"use strict";angular.module("app.navsearch",[])}(),function(){"use strict";angular.module("app.notify",[])}(),function(){"use strict";angular.module("app.pages",[])}(),function(){"use strict";angular.module("app.panels",[])}(),function(){"use strict";angular.module("app.preloader",[])}(),function(){"use strict";angular.module("app.routes",["app.lazyload"])}(),function(){"use strict";angular.module("app.settings",[])}(),function(){"use strict";angular.module("app.sidebar",[])}(),function(){"use strict";angular.module("app.tables",[])}(),function(){"use strict";angular.module("app.translate",[])}(),function(){"use strict";angular.module("app.utils",["app.colors"])}(),function(){"use strict";function e(){function e(){a.alerts=[{type:"danger",msg:"Oh snap! Change a few things up and try submitting again."},{type:"warning",msg:"Well done! You successfully read this important alert message."}],a.addAlert=function(){a.alerts.push({msg:"Another alert!"})},a.closeAlert=function(e){a.alerts.splice(e,1)}}var a=this;e()}angular.module("app.bootstrapui").controller("AlertDemoCtrl",e)}(),function(){"use strict";function e(e){e.options({appendToBody:!0})}angular.module("app.bootstrapui").config(e),e.$inject=["$uibTooltipProvider"]}(),function(){"use strict";function e(){function e(){a.singleModel=1,a.radioModel="Middle",a.checkModel={left:!1,middle:!0,right:!1}}var a=this;e()}angular.module("app.bootstrapui").controller("ButtonsCtrl",e)}(),function(){"use strict";function e(){function e(){a.myInterval=5e3;var e=a.slides=[];a.addSlide=function(a){a=a||8,e.push({image:"app/img/bg"+a+".jpg",text:["More","Extra","Lots of","Surplus"][e.length%2]+" "+["Cats","Kittys","Felines","Cutes"][e.length%2]})},a.addSlide(4),a.addSlide(7),a.addSlide(8)}var a=this;e()}angular.module("app.bootstrapui").controller("CarouselDemoCtrl",e)}(),function(){"use strict";function e(){function e(){a.today=function(){a.dt=new Date},a.today(),a.clear=function(){a.dt=null},a.disabled=function(e,a){return"day"===a&&(0===e.getDay()||6===e.getDay())},a.toggleMin=function(){a.minDate=a.minDate?null:new Date},a.toggleMin(),a.open=function(e){e.preventDefault(),e.stopPropagation(),a.opened=!0},a.dateOptions={formatYear:"yy",startingDay:1},a.initDate=new Date("2019-10-20"),a.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],a.format=a.formats[0]}var a=this;e()}angular.module("app.bootstrapui").controller("DatepickerDemoCtrl",e)}(),function(){"use strict";function e(e){function a(){function a(e,a){e.ok=function(){a.close("closed")},e.cancel=function(){a.dismiss("cancel")}}t.open=function(t){var o=e.open({templateUrl:"/myModalContent.html",controller:a,size:t}),n=$("#modal-state");o.result.then(function(){n.text("Modal dismissed with OK status")},function(){n.text("Modal dismissed with Cancel status")})},a.$inject=["$scope","$uibModalInstance"]}var t=this;a()}angular.module("app.bootstrapui").controller("ModalController",e),e.$inject=["$uibModal"]}(),function(){"use strict";function e(){function e(){a.totalItems=64,a.currentPage=4,a.setPage=function(e){a.currentPage=e},a.pageChanged=function(){console.log("Page changed to: "+a.currentPage)},a.maxSize=5,a.bigTotalItems=175,a.bigCurrentPage=1}var a=this;e()}angular.module("app.bootstrapui").controller("PaginationDemoCtrl",e)}(),function(){"use strict";function e(){function e(){a.dynamicPopover="Hello, World!",a.dynamicPopoverTitle="Title"}var a=this;e()}angular.module("app.bootstrapui").controller("PopoverDemoCtrl",e)}(),function(){"use strict";function e(){function e(){a.max=200,a.random=function(){var e,t=Math.floor(100*Math.random()+1);e=25>t?"success":50>t?"info":75>t?"warning":"danger",a.showWarning="danger"===e||"warning"===e,a.dynamic=t,a.type=e},a.random(),a.randomStacked=function(){a.stacked=[];for(var e=["success","info","warning","danger"],t=0,o=Math.floor(4*Math.random()+1);o>t;t++){var n=Math.floor(4*Math.random());a.stacked.push({value:Math.floor(30*Math.random()+1),type:e[n]})}},a.randomStacked()}var a=this;e()}angular.module("app.bootstrapui").controller("ProgressDemoCtrl",e)}(),function(){"use strict";function e(){function e(){a.rate=7,a.max=10,a.isReadonly=!1,a.hoveringOver=function(e){a.overStar=e,a.percent=100*(e/a.max)},a.ratingStates=[{stateOn:"fa fa-check",stateOff:"fa fa-check-circle"},{stateOn:"fa fa-star",stateOff:"fa fa-star-o"},{stateOn:"fa fa-heart",stateOff:"fa fa-ban"},{stateOn:"fa fa-heart"},{stateOff:"fa fa-power-off"}]}var a=this;e()}angular.module("app.bootstrapui").controller("RatingDemoCtrl",e)}(),function(){"use strict";function e(){function e(){a.mytime=new Date,a.hstep=1,a.mstep=15,a.options={hstep:[1,2,3],mstep:[1,5,10,15,25,30]},a.ismeridian=!0,a.toggleMode=function(){a.ismeridian=!a.ismeridian},a.update=function(){var e=new Date;e.setHours(14),e.setMinutes(0),a.mytime=e},a.changed=function(){console.log("Time changed to: "+a.mytime)},a.clear=function(){a.mytime=null}}var a=this;e()}angular.module("app.bootstrapui").controller("TimepickerDemoCtrl",e)}(),function(){"use strict";function e(){function e(){function e(e){for(var a=e.offsetTop,t=40;e.offsetParent;)e=e.offsetParent,a+=e.offsetTop;return a-t-window.pageYOffset}function t(e){for(var a=e.offsetLeft,t=e.offsetWidth;e.offsetParent;)e=e.offsetParent,a+=e.offsetLeft;return a-t-window.pageXOffset}a.dynamicTooltip="Hello, World!",a.dynamicTooltipText="dynamic",a.htmlTooltip="I've been made <b>bold</b>!",a.autoplace=function(a,o){var n="top";return e(o)<0&&(n="bottom"),t(o)<0&&(n="right"),n}}var a=this;e()}angular.module("app.bootstrapui").controller("TooltipDemoCtrl",e)}(),function(){"use strict";function e(e){function a(){t.selected=void 0,t.states=["Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Dakota","North Carolina","Ohio","Oklahoma","Oregon","Pennsylvania","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming"],t.getLocation=function(a){return e.get("//maps.googleapis.com/maps/api/geocode/json",{params:{address:a,sensor:!1}}).then(function(e){var a=[];return angular.forEach(e.data.results,function(e){a.push(e.formatted_address)}),a})},t.statesWithFlags=[{name:"Alabama",flag:"5/5c/Flag_of_Alabama.svg/45px-Flag_of_Alabama.svg.png"},{name:"Alaska",flag:"e/e6/Flag_of_Alaska.svg/43px-Flag_of_Alaska.svg.png"},{name:"Arizona",flag:"9/9d/Flag_of_Arizona.svg/45px-Flag_of_Arizona.svg.png"},{name:"Arkansas",flag:"9/9d/Flag_of_Arkansas.svg/45px-Flag_of_Arkansas.svg.png"},{name:"California",flag:"0/01/Flag_of_California.svg/45px-Flag_of_California.svg.png"},{name:"Colorado",flag:"4/46/Flag_of_Colorado.svg/45px-Flag_of_Colorado.svg.png"},{name:"Connecticut",flag:"9/96/Flag_of_Connecticut.svg/39px-Flag_of_Connecticut.svg.png"},{name:"Delaware",flag:"c/c6/Flag_of_Delaware.svg/45px-Flag_of_Delaware.svg.png"},{name:"Florida",flag:"f/f7/Flag_of_Florida.svg/45px-Flag_of_Florida.svg.png"},{name:"Georgia",flag:"5/54/Flag_of_Georgia_%28U.S._state%29.svg/46px-Flag_of_Georgia_%28U.S._state%29.svg.png"},{name:"Hawaii",flag:"e/ef/Flag_of_Hawaii.svg/46px-Flag_of_Hawaii.svg.png"},{name:"Idaho",flag:"a/a4/Flag_of_Idaho.svg/38px-Flag_of_Idaho.svg.png"},{name:"Illinois",flag:"0/01/Flag_of_Illinois.svg/46px-Flag_of_Illinois.svg.png"},{name:"Indiana",flag:"a/ac/Flag_of_Indiana.svg/45px-Flag_of_Indiana.svg.png"},{name:"Iowa",flag:"a/aa/Flag_of_Iowa.svg/44px-Flag_of_Iowa.svg.png"},{name:"Kansas",flag:"d/da/Flag_of_Kansas.svg/46px-Flag_of_Kansas.svg.png"},{name:"Kentucky",flag:"8/8d/Flag_of_Kentucky.svg/46px-Flag_of_Kentucky.svg.png"},{name:"Louisiana",flag:"e/e0/Flag_of_Louisiana.svg/46px-Flag_of_Louisiana.svg.png"},{name:"Maine",flag:"3/35/Flag_of_Maine.svg/45px-Flag_of_Maine.svg.png"},{name:"Maryland",flag:"a/a0/Flag_of_Maryland.svg/45px-Flag_of_Maryland.svg.png"},{name:"Massachusetts",flag:"f/f2/Flag_of_Massachusetts.svg/46px-Flag_of_Massachusetts.svg.png"},{name:"Michigan",flag:"b/b5/Flag_of_Michigan.svg/45px-Flag_of_Michigan.svg.png"},{name:"Minnesota",flag:"b/b9/Flag_of_Minnesota.svg/46px-Flag_of_Minnesota.svg.png"},{name:"Mississippi",flag:"4/42/Flag_of_Mississippi.svg/45px-Flag_of_Mississippi.svg.png"},{name:"Missouri",flag:"5/5a/Flag_of_Missouri.svg/46px-Flag_of_Missouri.svg.png"},{name:"Montana",flag:"c/cb/Flag_of_Montana.svg/45px-Flag_of_Montana.svg.png"},{name:"Nebraska",flag:"4/4d/Flag_of_Nebraska.svg/46px-Flag_of_Nebraska.svg.png"},{name:"Nevada",flag:"f/f1/Flag_of_Nevada.svg/45px-Flag_of_Nevada.svg.png"},{name:"New Hampshire",flag:"2/28/Flag_of_New_Hampshire.svg/45px-Flag_of_New_Hampshire.svg.png"},{name:"New Jersey",flag:"9/92/Flag_of_New_Jersey.svg/45px-Flag_of_New_Jersey.svg.png"},{name:"New Mexico",flag:"c/c3/Flag_of_New_Mexico.svg/45px-Flag_of_New_Mexico.svg.png"},{name:"New York",flag:"1/1a/Flag_of_New_York.svg/46px-Flag_of_New_York.svg.png"},{name:"North Carolina",flag:"b/bb/Flag_of_North_Carolina.svg/45px-Flag_of_North_Carolina.svg.png"},{name:"North Dakota",flag:"e/ee/Flag_of_North_Dakota.svg/38px-Flag_of_North_Dakota.svg.png"},{name:"Ohio",flag:"4/4c/Flag_of_Ohio.svg/46px-Flag_of_Ohio.svg.png"},{name:"Oklahoma",flag:"6/6e/Flag_of_Oklahoma.svg/45px-Flag_of_Oklahoma.svg.png"},{name:"Oregon",flag:"b/b9/Flag_of_Oregon.svg/46px-Flag_of_Oregon.svg.png"},{name:"Pennsylvania",flag:"f/f7/Flag_of_Pennsylvania.svg/45px-Flag_of_Pennsylvania.svg.png"},{name:"Rhode Island",flag:"f/f3/Flag_of_Rhode_Island.svg/32px-Flag_of_Rhode_Island.svg.png"},{name:"South Carolina",flag:"6/69/Flag_of_South_Carolina.svg/45px-Flag_of_South_Carolina.svg.png"},{name:"South Dakota",flag:"1/1a/Flag_of_South_Dakota.svg/46px-Flag_of_South_Dakota.svg.png"},{name:"Tennessee",flag:"9/9e/Flag_of_Tennessee.svg/46px-Flag_of_Tennessee.svg.png"},{name:"Texas",flag:"f/f7/Flag_of_Texas.svg/45px-Flag_of_Texas.svg.png"},{name:"Utah",flag:"f/f6/Flag_of_Utah.svg/45px-Flag_of_Utah.svg.png"},{name:"Vermont",flag:"4/49/Flag_of_Vermont.svg/46px-Flag_of_Vermont.svg.png"},{name:"Virginia",flag:"4/47/Flag_of_Virginia.svg/44px-Flag_of_Virginia.svg.png"},{name:"Washington",flag:"5/54/Flag_of_Washington.svg/46px-Flag_of_Washington.svg.png"},{name:"West Virginia",flag:"2/22/Flag_of_West_Virginia.svg/46px-Flag_of_West_Virginia.svg.png"},{name:"Wisconsin",flag:"2/22/Flag_of_Wisconsin.svg/45px-Flag_of_Wisconsin.svg.png"},{name:"Wyoming",flag:"b/bc/Flag_of_Wyoming.svg/43px-Flag_of_Wyoming.svg.png"}]}var t=this;a()}angular.module("app.bootstrapui").controller("TypeaheadCtrl",e),e.$inject=["$http"]}(),function(){"use strict";function e(){function e(){a.lineData={labels:["Monday","Tuesday","Wednesday","Thursday","Friday"],series:[[12,9,7,8,5],[2,1,3.5,7,3],[1,3,4,5,6]]},a.lineOptions={fullWidth:!0,height:220,chartPadding:{right:40}},a.barBipolarOptions={high:10,low:-10,height:220,axisX:{labelInterpolationFnc:function(e,a){return a%2===0?e:null}}},a.barBipolarData={labels:["W1","W2","W3","W4","W5","W6","W7","W8","W9","W10"],series:[[1,2,4,8,6,-2,-1,-4,-6,-2]]},a.barHorizontalData={labels:["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],series:[[5,4,3,7,5,10,3],[3,2,9,5,4,6,4]]},a.barHorizontalOptions={seriesBarDistance:10,reverseData:!0,horizontalBars:!0,height:220,axisY:{offset:70}};var e=0,t=80,o=500;a.smilData={labels:["1","2","3","4","5","6","7","8","9","10","11","12"],series:[[12,9,7,8,5,4,6,2,3,3,4,6],[4,5,3,7,3,5,5,3,4,4,5,5],[5,3,4,5,6,3,3,4,5,6,3,4],[3,4,5,6,7,6,4,5,6,7,6,3]]},a.smilOptions={low:0,height:260},a.smilEvents={created:function(){e=0},draw:function(a){e++,"line"===a.type?a.element.animate({opacity:{begin:e*t+1e3,dur:o,from:0,to:1}}):"label"===a.type&&"x"===a.axis?a.element.animate({y:{begin:e*t,dur:o,from:a.y+100,to:a.y,easing:"easeOutQuart"}}):"label"===a.type&&"y"===a.axis?a.element.animate({x:{begin:e*t,dur:o,from:a.x-100,to:a.x,easing:"easeOutQuart"}}):"point"===a.type&&a.element.animate({x1:{begin:e*t,dur:o,from:a.x-10,to:a.x,easing:"easeOutQuart"},x2:{begin:e*t,dur:o,from:a.x-10,to:a.x,easing:"easeOutQuart"},opacity:{begin:e*t,dur:o,from:0,to:1,easing:"easeOutQuart"}})}},a.pathData={labels:["Mon","Tue","Wed","Thu","Fri","Sat"],series:[[1,5,2,5,4,3],[2,3,4,8,1,2],[5,4,3,2,1,.5]]},a.pathOptions={low:0,showArea:!0,showPoint:!1,fullWidth:!0,height:260},a.pathEvents={draw:function(e){("line"===e.type||"area"===e.type)&&e.element.animate({d:{begin:2e3*e.index,dur:2e3,from:e.path.clone().scale(1,0).translate(0,e.chartRect.height()).stringify(),to:e.path.clone().stringify(),easing:Chartist.Svg.Easing.easeOutQuint}})}}}var a=this;e()}angular.module("app.charts").controller("ChartistController",e)}(),function(){"use strict";function e(e){function a(){var a=function(){return Math.round(100*Math.random())};t.lineData={labels:["January","February","March","April","May","June","July"],datasets:[{label:"My First dataset",fillColor:"rgba(114,102,186,0.2)",strokeColor:"rgba(114,102,186,1)",pointColor:"rgba(114,102,186,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(114,102,186,1)",data:[a(),a(),a(),a(),a(),a(),a()]},{label:"My Second dataset",fillColor:"rgba(35,183,229,0.2)",strokeColor:"rgba(35,183,229,1)",pointColor:"rgba(35,183,229,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(35,183,229,1)",data:[a(),a(),a(),a(),a(),a(),a()]}]},t.lineOptions={scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,bezierCurve:!0,bezierCurveTension:.4,pointDot:!0,pointDotRadius:4,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0},t.barData={labels:["January","February","March","April","May","June","July"],datasets:[{fillColor:e.byName("info"),strokeColor:e.byName("info"),highlightFill:e.byName("info"),highlightStroke:e.byName("info"),data:[a(),a(),a(),a(),a(),a(),a()]},{fillColor:e.byName("primary"),strokeColor:e.byName("primary"),highlightFill:e.byName("primary"),highlightStroke:e.byName("primary"),data:[a(),a(),a(),a(),a(),a(),a()]}]},t.barOptions={scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1},t.doughnutData=[{value:300,color:e.byName("purple"),highlight:e.byName("purple"),label:"Purple"},{value:50,color:e.byName("info"),highlight:e.byName("info"),label:"Info"},{value:100,color:e.byName("yellow"),highlight:e.byName("yellow"),label:"Yellow"}],t.doughnutOptions={segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:85,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1},t.pieData=[{value:300,color:e.byName("purple"),highlight:e.byName("purple"),label:"Purple"},{value:40,color:e.byName("yellow"),highlight:e.byName("yellow"),label:"Yellow"},{value:120,color:e.byName("info"),highlight:e.byName("info"),label:"Info"}],t.pieOptions={segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:0,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1},t.polarData=[{value:300,color:e.byName("pink"),highlight:e.byName("pink"),label:"Red"},{value:50,color:e.byName("purple"),highlight:e.byName("purple"),label:"Green"},{value:100,color:e.byName("pink"),highlight:e.byName("pink"),label:"Yellow"},{value:140,color:e.byName("purple"),highlight:e.byName("purple"),label:"Grey"}],t.polarOptions={scaleShowLabelBackdrop:!0,scaleBackdropColor:"rgba(255,255,255,0.75)",scaleBeginAtZero:!0,scaleBackdropPaddingY:1,scaleBackdropPaddingX:1,scaleShowLine:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1},t.radarData={labels:["Eating","Drinking","Sleeping","Designing","Coding","Cycling","Running"],datasets:[{label:"My First dataset",fillColor:"rgba(114,102,186,0.2)",strokeColor:"rgba(114,102,186,1)",pointColor:"rgba(114,102,186,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(114,102,186,1)",data:[65,59,90,81,56,55,40]},{label:"My Second dataset",fillColor:"rgba(151,187,205,0.2)",strokeColor:"rgba(151,187,205,1)",pointColor:"rgba(151,187,205,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(151,187,205,1)",data:[28,48,40,19,96,27,100]}]},t.radarOptions={scaleShowLine:!0,angleShowLineOut:!0,scaleShowLabels:!1,scaleBeginAtZero:!0,angleLineColor:"rgba(0,0,0,.1)",angleLineWidth:1,pointLabelFontFamily:"'Arial'",pointLabelFontStyle:"bold",pointLabelFontSize:10,pointLabelFontColor:"#565656",pointDot:!0,pointDotRadius:3,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0}}var t=this;a()}angular.module("app.charts").controller("ChartJSController",e),e.$inject=["Colors"]}(),function(){"use strict";function e(e){return function(){return{restrict:"A",scope:{data:"=",options:"=",id:"@",width:"=",height:"=",resize:"=",chart:"@",segments:"@",responsive:"=",tooltip:"=",legend:"="},link:function(a,t){var o=t[0].getContext("2d"),n=!1;a.size=function(){a.width<=0?(t.width(t.parent().width()),o.canvas.width=t.width()):(o.canvas.width=a.width||o.canvas.width,n=!0),a.height<=0?(t.height(t.parent().height()),o.canvas.height=o.canvas.width/2):(o.canvas.height=a.height||o.canvas.height,n=!0)},a.$watch("data",function(l){r&&r.destroy(),l&&(a.chart&&(e=a.chart),n&&(a.size(),i=new Chart(o)),(a.responsive||a.resize)&&(a.options.responsive=!0),void 0!==a.responsive&&(a.options.responsive=a.responsive),r=i[e](a.data,a.options),r.update(),a.legend&&angular.element(t[0]).parent().after(r.generateLegend()))},!0),a.$watch("tooltip",function(e){if(r&&r.draw(),void 0!==e&&r.segments&&!(!isFinite(e)||e>=r.segments.length||0>e)){var a=r.segments[e];a.save(),a.fillColor=a.highlightColor,r.showTooltip([a]),a.restore()}},!0),a.size();var r,i=new Chart(o)}}}}angular.module("app.charts").directive("linechart",e("Line")).directive("barchart",e("Bar")).directive("radarchart",e("Radar")).directive("polarchart",e("PolarArea")).directive("piechart",e("Pie")).directive("doughnutchart",e("Doughnut")).directive("donutchart",e("Doughnut"))}(),function(){"use strict";function e(e,a,t){function o(o,n){function r(e,t){var o=-20;!e.hasClass(s)&&a.isInView(e,{topoffset:o})&&i(e,t)}function i(e,a){e.ClassyLoader(a).addClass(s)}var l=$(t),s="js-is-in-view";e(function(){var e=$(n),a=e.data();a&&(a.triggerInView?(l.scroll(function(){r(e,a)}),r(e,a)):i(e,a))},0)}var n={link:o,restrict:"A"};return n}angular.module("app.charts").directive("classyloader",e),e.$inject=["$timeout","Utils","$window"]}(),function(){"use strict";function e(e){function a(a){return e(a,{},t).get()}this.load=a;var t={get:{method:"GET",isArray:!0}}}angular.module("app.charts").service("ChartData",e),e.$inject=["$resource"]}(),function(){"use strict";function e(e,a,t){function o(){function o(){for(i.length>0&&(i=i.slice(1));i.length<l;){var e=i.length>0?i[i.length-1]:50,a=e+10*Math.random()-5;0>a?a=0:a>100&&(a=100),i.push(a)}for(var t=[],o=0;o<i.length;++o)t.push([o,i[o]]);return[t]}function r(){n.realTimeData=o(),t(r,30)}n.barData=a.load("server/chart/bar.json"),n.barOptions={series:{bars:{align:"center",lineWidth:0,show:!0,barWidth:.6,fill:.9}},grid:{borderColor:"#eee",borderWidth:1,hoverable:!0,backgroundColor:"#fcfcfc"},tooltip:!0,tooltipOpts:{content:function(e,a,t){return a+" : "+t}},xaxis:{tickColor:"#fcfcfc",mode:"categories"},yaxis:{position:e.app.layout.isRTL?"right":"left",tickColor:"#eee"},shadowSize:0},n.barStackeData=a.load("server/chart/barstacked.json"),n.barStackedOptions={series:{stack:!0,bars:{align:"center",lineWidth:0,show:!0,barWidth:.6,fill:.9}},grid:{borderColor:"#eee",borderWidth:1,hoverable:!0,backgroundColor:"#fcfcfc"},tooltip:!0,tooltipOpts:{content:function(e,a,t){return a+" : "+t}},xaxis:{tickColor:"#fcfcfc",mode:"categories"},yaxis:{min:0,max:200,position:e.app.layout.isRTL?"right":"left",tickColor:"#eee"},shadowSize:0},n.splineData=a.load("server/chart/spline.json"),n.splineOptions={series:{lines:{show:!1},points:{show:!0,radius:4},splines:{show:!0,tension:.4,lineWidth:1,fill:.5}},grid:{borderColor:"#eee",borderWidth:1,hoverable:!0,backgroundColor:"#fcfcfc"},tooltip:!0,tooltipOpts:{content:function(e,a,t){return a+" : "+t}},xaxis:{tickColor:"#fcfcfc",mode:"categories"},yaxis:{min:0,max:150,tickColor:"#eee",position:e.app.layout.isRTL?"right":"left",tickFormatter:function(e){return e}},shadowSize:0},n.areaData=a.load("server/chart/area.json"),n.areaOptions={series:{lines:{show:!0,fill:.8},points:{show:!0,radius:4}},grid:{borderColor:"#eee",borderWidth:1,hoverable:!0,backgroundColor:"#fcfcfc"},tooltip:!0,tooltipOpts:{content:function(e,a,t){return a+" : "+t}},xaxis:{tickColor:"#fcfcfc",mode:"categories"},yaxis:{min:0,tickColor:"#eee",position:e.app.layout.isRTL?"right":"left",tickFormatter:function(e){return e+" visitors"}},shadowSize:0},n.lineData=a.load("server/chart/line.json"),n.lineOptions={series:{lines:{show:!0,fill:.01},points:{show:!0,radius:4}},grid:{borderColor:"#eee",borderWidth:1,hoverable:!0,backgroundColor:"#fcfcfc"},tooltip:!0,tooltipOpts:{content:function(e,a,t){return a+" : "+t}},xaxis:{tickColor:"#eee",mode:"categories"},yaxis:{position:e.app.layout.isRTL?"right":"left",tickColor:"#eee"},shadowSize:0},n.pieData=[{label:"jQuery",color:"#4acab4",data:30},{label:"CSS",color:"#ffea88",data:40},{label:"LESS",color:"#ff8153",data:90},{label:"SASS",color:"#878bb6",data:75},{label:"Jade",color:"#b2d767",data:120}],n.pieOptions={series:{pie:{show:!0,innerRadius:0,label:{show:!0,radius:.8,formatter:function(e,a){return'<div class="flot-pie-label">'+Math.round(a.percent)+"%</div>"},background:{opacity:.8,color:"#222"}}}}},n.donutData=[{color:"#39C558",data:60,label:"Coffee"},{color:"#00b4ff",data:90,label:"CSS"},{color:"#FFBE41",data:50,label:"LESS"},{color:"#ff3e43",data:80,label:"Jade"},{color:"#937fc7",data:116,label:"AngularJS"}],n.donutOptions={series:{pie:{show:!0,innerRadius:.5}}},n.realTimeOptions={series:{lines:{show:!0,fill:!0,fillColor:{colors:["#a0e0f3","#23b7e5"]}},shadowSize:0},grid:{show:!1,borderWidth:0,minBorderMargin:20,labelMargin:10},xaxis:{tickFormatter:function(){return""}},yaxis:{min:0,max:110},legend:{show:!0},colors:["#23b7e5"]};var i=[],l=300;r(),e.$on("panel-refresh",function(a,o){console.log("Simulating chart refresh during 3s on #"+o),t(function(){e.$broadcast("removeSpinner",o),console.log("Refreshed #"+o)},3e3)}),e.$on("panel-remove",function(e,a,t){console.log("Panel #"+a+" removing"),t.resolve()}),e.$on("panel-removed",function(e,a){console.log("Panel #"+a+" removed")})}var n=this;o()}angular.module("app.charts").controller("FlotChartController",e),e.$inject=["$scope","ChartData","$timeout"]}(),function(){"use strict";function e(e,a){function t(t,o,n){function r(){var e;if(t.dataset&&t.options)return e=$.plot(d,t.dataset,t.options),t.$emit("plotReady",e),t.callback&&t.callback(e,t),e}function i(e){return u?(u.setData(e),u.setupGrid(),u.draw()):(u=r(),l(t.series),u)}function l(e){function a(e){return function(a,o){t[o]&&t[o][e]&&(t[o][e].show=a)}}if(u&&e){var t=u.getData();for(var o in e)angular.forEach(e[o],a(o));u.setData(t),u.draw()}}function s(o){o&&e.get(o).success(function(e){a(function(){t.dataset=e})}).error(function(){$.error("Flot chart: Bad request.")})}var c,u,d,p,m=220;u=null,p=n.width||"100%",c=n.height||m,d=$(o.children()[0]),d.css({width:p,height:c}),t.$watchCollection("dataset",i,!0),t.$watch("series",l,!0),t.$watch("src",s)}var o={restrict:"EA",template:"<div></div>",scope:{dataset:"=?",options:"=",series:"=",callback:"=",src:"="},link:t};return o}angular.module("app.charts").directive("flot",e),e.$inject=["$http","$timeout"]}(),function(){"use strict";function e(e,a){function t(){o.chartdata=[{y:"2006",a:100,b:90},{y:"2007",a:75,b:65},{y:"2008",a:50,b:40},{y:"2009",a:75,b:65},{y:"2010",a:50,b:40},{y:"2011",a:75,b:65},{y:"2012",a:100,b:90}],o.donutdata=[{label:"Download Sales",value:12},{label:"In-Store Sales",value:30},{label:"Mail-Order Sales",value:20}],o.donutOptions={Colors:[a.byName("danger"),a.byName("yellow"),a.byName("warning")],resize:!0},o.barOptions={xkey:"y",ykeys:["a","b"],labels:["Series A","Series B"],xLabelMargin:2,barColors:[a.byName("info"),a.byName("danger")],resize:!0},o.lineOptions={xkey:"y",ykeys:["a","b"],labels:["Serie A","Serie B"],lineColors:["#31C0BE","#7a92a3"],resize:!0},o.areaOptions={xkey:"y",ykeys:["a","b"],labels:["Serie A","Serie B"],lineColors:[a.byName("purple"),a.byName("info")],resize:!0}}var o=this;t()}angular.module("app.charts").controller("ChartMorrisController",e),e.$inject=["$timeout","Colors"]}(),function(){"use strict";function e(e){return function(){return{restrict:"EA",scope:{morrisData:"=",morrisOptions:"="},link:function(a,t){a.$watch("morrisData",function(e){e&&(a.morrisInstance.setData(e),a.morrisInstance.redraw())},!0),a.morrisOptions.element=t,a.morrisData&&(a.morrisOptions.data=a.morrisData),a.morrisInstance=new Morris[e](a.morrisOptions)}}}}angular.module("app.charts").directive("morrisBar",e("Bar")).directive("morrisDonut",e("Donut")).directive("morrisLine",e("Line")).directive("morrisArea",e("Area"))}(),function(){"use strict";function e(e){function a(){function a(){return Math.floor(100*Math.random()+1)}t.knobLoaderData1=80,t.knobLoaderOptions1={width:"50%",displayInput:!0,fgColor:e.byName("info")},t.knobLoaderData2=45,t.knobLoaderOptions2={width:"50%",displayInput:!0,fgColor:e.byName("purple"),readOnly:!0},t.knobLoaderData3=30,t.knobLoaderOptions3={width:"50%",displayInput:!0,fgColor:e.byName("pink"),displayPrevious:!0,thickness:.1,lineCap:"round"},t.knobLoaderData4=20,t.knobLoaderOptions4={width:"50%",displayInput:!0,fgColor:e.byName("info"),bgColor:e.byName("gray"),angleOffset:-125,angleArc:250},t.piePercent1=85,t.piePercent2=45,t.piePercent3=25,t.piePercent4=60,t.pieOptions1={animate:{duration:800,enabled:!0},barColor:e.byName("success"),trackColor:!1,scaleColor:!1,lineWidth:10,lineCap:"circle"},t.pieOptions2={animate:{duration:800,enabled:!0},barColor:e.byName("warning"),trackColor:!1,scaleColor:!1,lineWidth:4,lineCap:"circle"},t.pieOptions3={animate:{duration:800,enabled:!0},barColor:e.byName("danger"),trackColor:!1,scaleColor:e.byName("gray"),lineWidth:15,lineCap:"circle"},t.pieOptions4={animate:{duration:800,enabled:!0},barColor:e.byName("danger"),trackColor:e.byName("yellow"),scaleColor:e.byName("gray-dark"),lineWidth:15,lineCap:"circle"},t.randomize=function(e){"easy"===e&&(t.piePercent1=a(),t.piePercent2=a(),t.piePercent3=a(),t.piePercent4=a()),"knob"===e&&(t.knobLoaderData1=a(),t.knobLoaderData2=a(),t.knobLoaderData3=a(),t.knobLoaderData4=a())}}var t=this;a()}angular.module("app.charts").controller("PieChartsController",e),e.$inject=["Colors"]}(),function(){"use strict";function e(){function e(){a.renderers=[{id:"area",name:"Area"},{id:"line",name:"Line"},{id:"bar",name:"Bar"},{id:"scatterplot",name:"Scatterplot"}],a.palettes=["spectrum14","spectrum2000","spectrum2001","colorwheel","cool","classic9","munin"],a.rendererChanged=function(e){a["options"+e]={renderer:a["renderer"+e].id}},a.paletteChanged=function(e){a["features"+e]={palette:a["palette"+e]}},a.changeSeriesData=function(e){for(var t=[],o=0;3>o;o++){for(var n={name:"Series "+(o+1),data:[]},r=0;10>r;r++)n.data.push({x:r,y:20*Math.random()});t.push(n),a["series"+e][o]=n}},a.series0=[],a.options0={renderer:"area"},a.renderer0=a.renderers[0],a.palette0=a.palettes[0],a.rendererChanged(0),a.paletteChanged(0),a.changeSeriesData(0);for(var e=[[],[],[]],t=new Rickshaw.Fixtures.RandomData(150),o=0;150>o;o++)t.addData(e);a.series2=[{color:"#c05020",data:e[0],name:"New York"},{color:"#30c020",data:e[1],name:"London"},{color:"#6060c0",data:e[2],name:"Tokyo"}],a.options2={renderer:"area"}}var a=this;e()}angular.module("app.charts").controller("ChartRickshawController",e)}(),function(){"use strict";function e(){var e={restrict:"EA",scope:{sparkline:"="},controller:a};return e}function a(e,a,t,o){function n(){var t=e.sparkline,n=a.data();t?n&&(t=angular.extend({},t,n)):t=n,t.type=t.type||"bar",t.disableHiddenCheck=!0,a.sparkline("html",t),t.resize&&$(o).resize(function(){a.sparkline("html",t)})}var r=function(){n()};t(r)}angular.module("app.charts").directive("sparkline",e),a.$inject=["$scope","$element","$timeout","$window"]}(),function(){"use strict";angular.module("app.colors").constant("APP_COLORS",{primary:"#5d9cec",success:"#27c24c",info:"#23b7e5",warning:"#ff902b",danger:"#f05050",inverse:"#131e26",green:"#37bc9b",pink:"#f532e5",purple:"#7266ba",dark:"#3a3f51",yellow:"#fad732","gray-darker":"#232735","gray-dark":"#3a3f51",gray:"#dde6e9","gray-light":"#e4eaec","gray-lighter":"#edf1f2"})}(),function(){"use strict";function e(e){function a(a){return e[a]||"#fff"}this.byName=a}angular.module("app.colors").service("Colors",e),e.$inject=["APP_COLORS"]}(),function(){"use strict";function e(e,a,t,o,n){var r=angular.module("app.core");r.controller=e.register,r.directive=a.directive,r.filter=t.register,r.factory=o.factory,r.service=o.service,r.constant=o.constant,r.value=o.value,n.classNameFilter(/^((?!(ng-no-animation)).)*$/)}angular.module("app.core").config(e),e.$inject=["$controllerProvider","$compileProvider","$filterProvider","$provide","$animateProvider"]}(),function(){"use strict";angular.module("app.core").constant("APP_MEDIAQUERY",{desktopLG:1200,desktop:992,tablet:768,mobile:480})}(),function(){"use strict";function e(e,a,t,o,n,r){e.$state=a,e.$stateParams=t,e.$storage=o.localStorage,e.colorByName=r.byName,e.cancel=function(e){e.stopPropagation()},e.$on("$stateNotFound",function(e,a){console.log(a.to),console.log(a.toParams),console.log(a.options)}),e.$on("$stateChangeError",function(e,a,t,o,n,r){console.log(r)}),e.$on("$stateChangeSuccess",function(){o.scrollTo(0,0),e.currTitle=a.current.title}),e.currTitle=a.current.title,e.pageTitle=function(){var a=e.app.name+" - "+(e.currTitle||e.app.description);return document.title=a,a}}angular.module("app.core").run(e),e.$inject=["$rootScope","$state","$stateParams","$window","$templateCache","Colors"]}(),function(){"use strict";function e(e,a,t){function o(){n.splineData=a.load("server/chart/spline.json"),n.splineOptions={series:{lines:{show:!1},points:{show:!0,radius:4},splines:{show:!0,tension:.4,lineWidth:1,fill:.5}},grid:{borderColor:"#eee",borderWidth:1,
hoverable:!0,backgroundColor:"#fcfcfc"},tooltip:!0,tooltipOpts:{content:function(e,a,t){return a+" : "+t}},xaxis:{tickColor:"#fcfcfc",mode:"categories"},yaxis:{min:0,max:150,tickColor:"#eee",position:e.app.layout.isRTL?"right":"left",tickFormatter:function(e){return e}},shadowSize:0},e.$on("panel-refresh",function(a,o){console.log("Simulating chart refresh during 3s on #"+o),t(function(){e.$broadcast("removeSpinner",o),console.log("Refreshed #"+o)},3e3)}),e.$on("panel-remove",function(e,a,t){console.log("Panel #"+a+" removing"),t.resolve()}),e.$on("panel-removed",function(e,a){console.log("Panel #"+a+" removed")})}var n=this;o()}angular.module("app.dashboard").controller("DashboardController",e),e.$inject=["$scope","ChartData","$timeout"]}(),function(){"use strict";function e(e,a,t){function o(){t.includes("app-h")?(e.app.layout.horizontal=!0,a.$on("$destroy",function(){e.app.layout.horizontal=!1})):e.app.layout.isCollapsed=!0,n.barStackedOptions={series:{stack:!0,bars:{align:"center",lineWidth:0,show:!0,barWidth:.6,fill:.9}},grid:{borderColor:"#eee",borderWidth:1,hoverable:!0,backgroundColor:"#fcfcfc"},tooltip:!0,tooltipOpts:{content:function(e,a,t){return a+" : "+t}},xaxis:{tickColor:"#fcfcfc",mode:"categories"},yaxis:{min:0,max:200,position:e.app.layout.isRTL?"right":"left",tickColor:"#eee"},shadowSize:0},n.splineOptions={series:{lines:{show:!1},points:{show:!0,radius:4},splines:{show:!0,tension:.4,lineWidth:1,fill:.5}},grid:{borderColor:"#eee",borderWidth:1,hoverable:!0,backgroundColor:"#fcfcfc"},tooltip:!0,tooltipOpts:{content:function(e,a,t){return a+" : "+t}},xaxis:{tickColor:"#fcfcfc",mode:"categories"},yaxis:{min:0,max:150,tickColor:"#eee",position:e.app.layout.isRTL?"right":"left",tickFormatter:function(e){return e}},shadowSize:0}}var n=this;o()}angular.module("app.dashboard").controller("DashboardV2Controller",e),e.$inject=["$rootScope","$scope","$state"]}(),function(){"use strict";function e(e){function a(){t.splineOptions={series:{lines:{show:!1},points:{show:!0,radius:4},splines:{show:!0,tension:.4,lineWidth:1,fill:.5}},grid:{borderColor:"#eee",borderWidth:1,hoverable:!0,backgroundColor:"#fcfcfc"},tooltip:!0,tooltipOpts:{content:function(e,a,t){return a+" : "+t}},xaxis:{tickColor:"#fcfcfc",mode:"categories"},yaxis:{min:0,max:150,tickColor:"#eee",position:e.app.layout.isRTL?"right":"left",tickFormatter:function(e){return e}},shadowSize:0},t.seriesData={CA:11100,DE:2510,FR:3710,AU:5710,GB:8310,RU:9310,BR:6610,IN:7810,CN:4310,US:839,SA:410},t.markersData=[{latLng:[41.9,12.45],name:"Vatican City"},{latLng:[43.73,7.41],name:"Monaco"},{latLng:[-.52,166.93],name:"Nauru"},{latLng:[-8.51,179.21],name:"Tuvalu"},{latLng:[7.11,171.06],name:"Marshall Islands"},{latLng:[17.3,-62.73],name:"Saint Kitts and Nevis"},{latLng:[3.2,73.22],name:"Maldives"},{latLng:[35.88,14.5],name:"Malta"},{latLng:[41,-71.06],name:"New England"},{latLng:[12.05,-61.75],name:"Grenada"},{latLng:[13.16,-59.55],name:"Barbados"},{latLng:[17.11,-61.85],name:"Antigua and Barbuda"},{latLng:[-4.61,55.45],name:"Seychelles"},{latLng:[7.35,134.46],name:"Palau"},{latLng:[42.5,1.51],name:"Andorra"}]}var t=this;a()}angular.module("app.dashboard").controller("DashboardV3Controller",e),e.$inject=["$rootScope"]}(),function(){"use strict";function e(){function e(){function e(e,t){var o=e.length;return{id:o+1,label:"slide #"+(o+1),img:"http://lorempixel.com/1200/500/"+t+"/"+(o+1)%10,color:a.colors[10*o%a.colors.length],odd:o%2===0}}function t(a,t){a.push(e(a,t))}function o(e,a,o){for(var n=0;o>n;n++)t(e,a)}a.colors=["#fc0003","#f70008","#f2000d","#ed0012","#e80017","#e3001c","#de0021","#d90026","#d4002b","#cf0030","#c90036","#c4003b","#bf0040","#ba0045","#b5004a","#b0004f","#ab0054","#a60059","#a1005e","#9c0063","#960069","#91006e","#8c0073","#870078","#82007d","#7d0082","#780087","#73008c","#6e0091","#690096","#63009c","#5e00a1","#5900a6","#5400ab","#4f00b0","#4a00b5","#4500ba","#4000bf","#3b00c4","#3600c9","#3000cf","#2b00d4","#2600d9","#2100de","#1c00e3","#1700e8","#1200ed","#0d00f2","#0800f7","#0300fc"],a.carouselIndex=3,a.carouselIndex2=0,a.carouselIndex2=1,a.carouselIndex3=5,a.carouselIndex4=5,a.slides=[],o(a.slides,"sports",50),a.slides2=[],o(a.slides2,"sports",10),a.slides3=[],o(a.slides3,"people",50),a.slides4=[],o(a.slides4,"city",50),a.slides6=[],a.carouselIndex6=0,o(a.slides6,"sports",10),a.addSlide=function(t){"head"===t?a.slides6.unshift(e(a.slides6,"people")):a.slides6.push(e(a.slides6,"people"))}}var a=this;e()}angular.module("app.elements").controller("AngularCarouselController",e)}(),function(){"use strict";function e(e,a,t){function o(){e.tpl=t,a.open({template:t.path,className:"ngdialog-theme-default"})}o()}function a(e,a,t){function o(){a.jsonData='{"foo": "bar"}',a.theme="ngdialog-theme-default",e.directivePreCloseCallback=function(e){return confirm("Close it? MainCtrl.Directive. (Value = "+e+")")?!0:!1},e.preCloseCallbackOnScope=function(e){return confirm("Close it? MainCtrl.OnScope (Value = "+e+")")?!0:!1},e.open=function(){t.open({template:"firstDialogId",controller:"InsideCtrl",data:{foo:"some data"}})},e.openDefault=function(){t.open({template:"firstDialogId",controller:"InsideCtrl",className:"ngdialog-theme-default"})},e.openDefaultWithPreCloseCallbackInlined=function(){t.open({template:"firstDialogId",controller:"InsideCtrl",className:"ngdialog-theme-default",preCloseCallback:function(e){return confirm("Close it?  (Value = "+e+")")?!0:!1}})},e.openConfirm=function(){t.openConfirm({template:"modalDialogId",className:"ngdialog-theme-default"}).then(function(e){console.log("Modal promise resolved. Value: ",e)},function(e){console.log("Modal promise rejected. Reason: ",e)})},e.openConfirmWithPreCloseCallbackOnScope=function(){t.openConfirm({template:"modalDialogId",className:"ngdialog-theme-default",preCloseCallback:"preCloseCallbackOnScope",scope:e}).then(function(e){console.log("Modal promise resolved. Value: ",e)},function(e){console.log("Modal promise rejected. Reason: ",e)})},e.openConfirmWithPreCloseCallbackInlinedWithNestedConfirm=function(){t.openConfirm({template:"dialogWithNestedConfirmDialogId",className:"ngdialog-theme-default",preCloseCallback:function(){var e=t.openConfirm({template:'<p>Are you sure you want to close the parent dialog?</p><div><button type="button" class="btn btn-default" ng-click="closeThisDialog(0)">No<button type="button" class="btn btn-primary" ng-click="confirm(1)">Yes</button></div>',plain:!0,className:"ngdialog-theme-default"});return e},scope:e}).then(function(e){console.log("resolved:"+e)},function(e){console.log("rejected:"+e)})},e.openInlineController=function(){a.theme="ngdialog-theme-default",t.open({template:"withInlineController",controller:["$scope","$timeout",function(e,a){function t(){e.exampleExternalData="Counter "+n++,o=a(t,450)}var o,n=0;t(),e.$on("$destroy",function(){a.cancel(o)})}],className:"ngdialog-theme-default"})},e.openTemplate=function(){e.value=!0,t.open({template:e.tpl.path,className:"ngdialog-theme-default",scope:e})},e.openTemplateNoCache=function(){e.value=!0,t.open({template:e.tpl.path,className:"ngdialog-theme-default",scope:e,cache:!1})},e.openTimed=function(){var e=t.open({template:"<p>Just passing through!</p>",plain:!0,closeByDocument:!1,closeByEscape:!1});setTimeout(function(){e.close()},2e3)},e.openNotify=function(){var e=t.open({template:'<p>You can do whatever you want when I close, however that happens.</p><div><button type="button" class="btn btn-primary" ng-click="closeThisDialog(1)">Close Me</button></div>',plain:!0});e.closePromise.then(function(e){console.log("ngDialog closed"+(1===e.value?" using the button":"")+" and notified by promise: "+e.id)})},e.openWithoutOverlay=function(){t.open({template:"<h2>Notice that there is no overlay!</h2>",className:"ngdialog-theme-default",plain:!0,overlay:!1})},a.$on("ngDialog.opened",function(e,a){console.log("ngDialog opened: "+a.attr("id"))}),a.$on("ngDialog.closed",function(e,a){console.log("ngDialog closed: "+a.attr("id"))}),a.$on("ngDialog.closing",function(e,a){console.log("ngDialog closing: "+a.attr("id"))})}o()}function t(e,a){function t(){e.dialogModel={message:"message from passed scope"},e.openSecond=function(){a.open({template:'<p class="lead m0"><a href="" ng-click="closeSecond()">Close all by click here!</a></h3>',plain:!0,closeByEscape:!1,controller:"SecondModalCtrl"})}}t()}function o(e,a){function t(){e.closeSecond=function(){a.close()}}t()}angular.module("app.elements").controller("DialogIntroCtrl",e).controller("DialogMainCtrl",a).controller("InsideCtrl",t).controller("SecondModalCtrl",o),e.$inject=["$scope","ngDialog","tpl"],a.$inject=["$scope","$rootScope","ngDialog"],t.$inject=["$scope","ngDialog"],o.$inject=["$scope","ngDialog"]}(),function(){"use strict";function e(){function e(){a.images=[1,2,3,4,5,6,7,8,9,10],a.loadMore=function(){for(var e=a.images[a.images.length-1],t=1;10>=t;t++)a.images.push(e+t)}}var a=this;e()}function a(e,a){var t=function(e,t,o){return a(function(){var a,n,r,i;for(n=[],a=r=e,i=e+t-1;i>=e?i>=r:r>=i;a=i>=e?++r:--r)n.push("item #"+a);return o(n)},100)};return{get:t}}angular.module("app.elements").controller("InfiniteScrollController",e).factory("datasource",a),a.$inject=["$log","$timeout"]}(),function(){"use strict";function e(e){function a(){t.basepath=e.basepath,t.photos=[{id:"photo-1",name:"Awesome photo",src:"http://lorempixel.com/400/300/abstract"},{id:"photo-2",name:"Great photo",src:"http://lorempixel.com/450/400/city"},{id:"photo-3",name:"Strange photo",src:"http://lorempixel.com/400/300/people"},{id:"photo-4",name:"A photo?",src:"http://lorempixel.com/400/300/transport"},{id:"photo-5",name:"What a photo",src:"http://lorempixel.com/450/300/fashion"},{id:"photo-6",name:"Silly photo",src:"http://lorempixel.com/400/300/technics"},{id:"photo-7",name:"Weird photo",src:"http://lorempixel.com/410/350/sports"},{id:"photo-8",name:"Modern photo",src:"http://lorempixel.com/400/300/nightlife"},{id:"photo-9",name:"Classical photo",src:"http://lorempixel.com/400/300/nature"},{id:"photo-10",name:"Dynamic photo",src:"http://lorempixel.com/420/300/abstract"},{id:"photo-11",name:"Neat photo",src:"http://lorempixel.com/400/300/sports"},{id:"photo-12",name:"Bumpy photo",src:"http://lorempixel.com/400/300/nightlife"},{id:"photo-13",name:"Brilliant photo",src:"http://lorempixel.com/400/380/nature"},{id:"photo-14",name:"Excellent photo",src:"http://lorempixel.com/480/300/technics"},{id:"photo-15",name:"Gorgeous photo",src:"http://lorempixel.com/400/300/sports"},{id:"photo-16",name:"Lovely photo",src:"http://lorempixel.com/400/300/nightlife"},{id:"photo-17",name:'A "wow" photo',src:"http://lorempixel.com/400/300/nature"},{id:"photo-18",name:"Bodacious photo",src:"http://lorempixel.com/400/300/abstract"}]}var t=this;a()}function a(){function e(e,a,t){var o=t.loadedclass;a.bind("load",function(){angular.element(a).addClass(o)})}var a={link:e,restrict:"A"};return a}angular.module("app.elements").controller("MasonryDeckController",e).directive("imageloaded",a),e.$inject=["RouteHelpers"]}(),function(){"use strict";function e(e,a){function t(){o.my_tree_handler=function(e){return o.output="You selected: "+e.label,e.data&&e.data.description?(o.output+="("+e.data.description+")",o.output):void 0};var e=function(e){return o.output="APPLE! : "+e.label,o.output},t=[{label:"Animal",children:[{label:"Dog",data:{description:"man's best friend"}},{label:"Cat",data:{description:"Felis catus"}},{label:"Hippopotamus",data:{description:"hungry, hungry"}},{label:"Chicken",children:["White Leghorn","Rhode Island Red","Jersey Giant"]}]},{label:"Vegetable",data:{definition:"A plant or part of a plant used as food, typically as accompaniment to meat or fish, such as a cabbage, potato, carrot, or bean.",data_can_contain_anything:!0},onSelect:function(e){return o.output="Vegetable: "+e.data.definition,o.output},children:[{label:"Oranges"},{label:"Apples",children:[{label:"Granny Smith",onSelect:e},{label:"Red Delicous",onSelect:e},{label:"Fuji",onSelect:e}]}]},{label:"Mineral",children:[{label:"Rock",children:["Igneous","Sedimentary","Metamorphic"]},{label:"Metal",children:["Aluminum","Steel","Copper"]},{label:"Plastic",children:[{label:"Thermoplastic",children:["polyethylene","polypropylene","polystyrene"," polyvinyl chloride"]},{label:"Thermosetting Polymer",children:["polyester","polyurethane","vulcanized rubber","bakelite","urea-formaldehyde"]}]}]}],n=[{label:"North America",children:[{label:"Canada",children:["Toronto","Vancouver"]},{label:"USA",children:["New York","Los Angeles"]},{label:"Mexico",children:["Mexico City","Guadalajara"]}]},{label:"South America",children:[{label:"Venezuela",children:["Caracas","Maracaibo"]},{label:"Brazil",children:["Sao Paulo","Rio de Janeiro"]},{label:"Argentina",children:["Buenos Aires","Cordoba"]}]}];o.my_data=t,o.try_changing_the_tree_data=function(){return o.my_data===t?o.my_data=n:o.my_data=t,o.my_data};var r;o.my_tree=r={},o.try_async_load=function(){o.my_data=[],o.doing_async=!0;var e=a("server/treedata.json");return e.get(function(e){return o.my_data=e.data,o.doing_async=!1,r.expand_all()}).$promise},o.try_adding_a_branch=function(){var e;return e=r.get_selected_branch(),r.add_branch(e,{label:"New Branch",data:{something:42,"else":43}})}}var o=this;t()}angular.module("app.elements").controller("AbnTestController",e),e.$inject=["$timeout","$resource"]}(),function(){"use strict";function e(){function e(){a.items=[{item:{text:"a"},children:[]},{item:{text:"b"},children:[{item:{text:"c"},children:[]},{item:{text:"d"},children:[]}]},{item:{text:"e"},children:[]},{item:{text:"f"},children:[]}],a.items2=[{item:{text:"1"},children:[]},{item:{text:"2"},children:[{item:{text:"3"},children:[]},{item:{text:"4"},children:[]}]},{item:{text:"5"},children:[]},{item:{text:"6"},children:[]}]}var a=this;e()}angular.module("app.elements").controller("NestableController",e)}(),function(){"use strict";function e(){function e(e,a,t){var o=250;a.slimScroll({height:t.height||o})}var a={link:e,restrict:"EA"};return a}angular.module("app.elements").directive("scrollable",e)}(),function(){"use strict";function e(e){function a(){e.data1=[{id:1,name:"Donald Hoffman"},{id:2,name:"Wallace Barrett"},{id:3,name:"Marsha Hicks"},{id:4,name:"Roland Brown"}],e.add=function(){e.data1.push({id:e.data1.length+1,name:"Earl Knight"})},e.sortableCallback=function(e,a,t,o){console.log(t+" -> "+o)},e.sortableOptions={placeholder:'<div class="box-placeholder p0 m0"><div></div></div>',forcePlaceholderSize:!0}}a()}angular.module("app.elements").controller("SortableController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e){function a(){t.demo1=function(){e.swal("Here's a message")},t.demo2=function(){e.swal("Here's a message!","It's pretty, isn't it?")},t.demo3=function(){e.swal("Good job!","You clicked the button!","success")},t.demo4=function(){e.swal({title:"Are you sure?",text:"Your will not be able to recover this imaginary file!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",closeOnConfirm:!1},function(){e.swal("Booyah!")})},t.demo5=function(){e.swal({title:"Are you sure?",text:"Your will not be able to recover this imaginary file!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",cancelButtonText:"No, cancel plx!",closeOnConfirm:!1,closeOnCancel:!1},function(a){a?e.swal("Deleted!","Your imaginary file has been deleted.","success"):e.swal("Cancelled","Your imaginary file is safe :)","error")})},t.demo6=function(){e.swal({title:"Sweet!",text:"Here's a custom image.",imageUrl:"http://oitozero.com/img/avatar.jpg"})}}var t=this;a()}angular.module("app.elements").controller("SweetAlertController",e),e.$inject=["SweetAlert"]}(),function(){"use strict";function e(e){function a(){t.toaster={type:"success",title:"Title",text:"Message"},t.pop=function(){e.pop(t.toaster.type,t.toaster.title,t.toaster.text)}}var t=this;a()}angular.module("app.elements").controller("ToasterDemoCtrl",e),e.$inject=["toaster"]}(),function(){"use strict";function e(e){function a(){var a=angular.element(".wrapper > section");a.css({position:"static"}),e.$on("$destroy",function(){a.css({position:""})})}a()}angular.module("app.elements").controller("TourCtrl",e),e.$inject=["$scope"]}(),function(){"use strict";function e(){function e(){a.htmlContent="Article content...",a.postDemo={},a.postDemo.tags=["coding","less"],a.availableTags=["coding","less","sass","angularjs","node","expressJS"],a.postDemo.categories=["JAVASCRIPT","WEB"],a.availableCategories=["JAVASCRIPT","WEB","BOOTSTRAP","SERVER","HTML5","CSS"],a.reviewers=[{name:"Adam",email:"adam@email.com",age:10},{name:"Amalie",email:"amalie@email.com",age:12},{name:"Wladimir",email:"wladimir@email.com",age:30},{name:"Samantha",email:"samantha@email.com",age:31},{name:"Estefanía",email:"estefanía@email.com",age:16},{name:"Natasha",email:"natasha@email.com",age:54},{name:"Nicole",email:"nicole@email.com",age:43},{name:"Adrian",email:"adrian@email.com",age:21}],a.alerts=[{type:"info",msg:'There is an autosaved version of this article that is more recent than the version below. <a href="#" class="text-white">Restore</a>'}],a.closeAlert=function(e){a.alerts.splice(e,1)}}var a=this;e()}angular.module("app.extras").controller("ArticleController",e)}(),function(){"use strict";function e(e){function a(a,r){if($.fn.fullCalendar){var i=r,l=n();o(i),t(i,l,e.app.layout.isRTL)}}var r={link:a,restrict:"EA"};return r}function a(e){e&&e.each(function(){var e=$(this),a={title:$.trim(e.text())};e.data("calendarEventObject",a),e.draggable({zIndex:1070,revert:!0,revertDuration:0})})}function t(e,a,t){var o=$("#remove-after-drop");e.fullCalendar({isRTL:t,header:{left:"prev,next today",center:"title",right:"month,agendaWeek,agendaDay"},buttonIcons:{prev:" fa fa-caret-left",next:" fa fa-caret-right"},buttonText:{today:"today",month:"month",week:"week",day:"day"},editable:!0,droppable:!0,drop:function(a,t){var n=$(this),r=n.data("calendarEventObject");if(r){var i=$.extend({},r);i.start=a,i.allDay=t,i.backgroundColor=n.css("background-color"),i.borderColor=n.css("border-color"),e.fullCalendar("renderEvent",i,!0),o.is(":checked")&&n.remove()}},eventDragStart:function(e){r=e},events:a})}function o(e){var t=$(".external-events");new a(t.children("div"));var o="#f6504d",n=$(".external-event-add-btn"),i=$(".external-event-name"),l=$(".external-event-color-selector .circle");$(".external-events-trash").droppable({accept:".fc-event",activeClass:"active",hoverClass:"hovered",tolerance:"touch",drop:function(a,t){if(r){var o=r.id||r._id;e.fullCalendar("removeEvents",o),t.draggable.remove(),r=null}}}),l.click(function(e){e.preventDefault();var a=$(this);o=a.css("background-color"),l.removeClass("selected"),a.addClass("selected")}),n.click(function(e){e.preventDefault();var n=i.val();if(""!==$.trim(n)){var r=$("<div/>").css({"background-color":o,"border-color":o,color:"#fff"}).html(n);t.prepend(r),new a(r),i.val("")}})}function n(){var e=new Date,a=e.getDate(),t=e.getMonth(),o=e.getFullYear();return[{title:"All Day Event",start:new Date(o,t,1),backgroundColor:"#f56954",borderColor:"#f56954"},{title:"Long Event",start:new Date(o,t,a-5),end:new Date(o,t,a-2),backgroundColor:"#f39c12",borderColor:"#f39c12"},{title:"Meeting",start:new Date(o,t,a,10,30),allDay:!1,backgroundColor:"#0073b7",borderColor:"#0073b7"},{title:"Lunch",start:new Date(o,t,a,12,0),end:new Date(o,t,a,14,0),allDay:!1,backgroundColor:"#00c0ef",borderColor:"#00c0ef"},{title:"Birthday Party",start:new Date(o,t,a+1,19,0),end:new Date(o,t,a+1,22,30),allDay:!1,backgroundColor:"#00a65a",borderColor:"#00a65a"},{title:"Open Google",start:new Date(o,t,28),end:new Date(o,t,29),url:"//google.com/",backgroundColor:"#3c8dbc",borderColor:"#3c8dbc"}]}angular.module("app.extras").directive("calendar",e),e.$inject=["$rootScope"];var r=null}(),function(){"use strict";function e(e){return e("server/editor/filetree.json")}angular.module("app.extras").service("LoadTreeService",e),e.$inject=["$resource"]}(),function(){"use strict";function e(e,a,t,o,n){function r(){e.app.useFullLayout=!0,e.app.hiddenFooter=!0,e.app.layout.isCollapsed=!0,a.$on("$destroy",function(){e.app.useFullLayout=!1,e.app.hiddenFooter=!1})}function i(){function e(e){var a=e.split(".");switch(a=a?a[a.length-1]:""){case"html":return"htmlmixed";case"css":return"css";default:return"javascript"}}l.filetree_data=n,l.editorThemes=["3024-day","3024-night","ambiance-mobile","ambiance","base16-dark","base16-light","blackboard","cobalt","eclipse","elegant","erlang-dark","lesser-dark","mbo","mdn-like","midnight","monokai","neat","neo","night","paraiso-dark","paraiso-light","pastel-on-dark","rubyblue","solarized","the-matrix","tomorrow-night-eighties","twilight","vibrant-ink","xq-dark","xq-light"],l.editorOpts={mode:"javascript",lineNumbers:!0,matchBrackets:!0,theme:"mbo",viewportMargin:1/0},l.refreshEditor=0,l.loadTheme=function(){var e="vendor/codemirror/theme/";o.load(e+l.editorOpts.theme+".css"),l.refreshEditor=!l.refreshEditor},l.loadTheme(l.editorOpts.theme),l.code="// Open a file from the left menu \n// It will be requested to the server and loaded into the editor\n// Also try adding a New File from the toolbar\n";var a;l.handle_filetree=function(o){a=o;var n="server/editor/",r=!!o.children.length;console.log("You selected: "+o.label+" - isFolder? "+r),r||t.get(n+o.path).success(function(a){console.log("Loaded.. "+o.path),l.code=a,l.editorOpts.mode=e(o.path),console.log("Mode is: "+l.editorOpts.mode)})};var r;r=l.filetree={},l.new_filetree=function(){var e;return e=r.get_selected_branch(),e&&0===e.children.length&&(e=r.get_parent_branch(e)),r.add_branch(e,{label:"another.html",path:"source/another.html"})}}var l=this;r(),i()}angular.module("app.extras").controller("CodeEditorController",e),e.$inject=["$rootScope","$scope","$http","$ocLazyLoad","filetree"]}(),function(){"use strict";function e(e){function a(){t.items=[{todo:{title:"Meeting with Mark at 7am.",description:"Pellentesque convallis mauris eu elit imperdiet quis eleifend quam aliquet. "},complete:!0},{todo:{title:"Call Sonya. Talk about the new project.",description:""},complete:!1},{todo:{title:"Find a new place for vacations",description:""},complete:!1}],t.editingTodo=!1,t.todo={},t.addTodo=function(){""!==t.todo.title&&(t.todo.description||(t.todo.description=""),t.editingTodo?(t.todo={},t.editingTodo=!1):(t.items.push({todo:angular.copy(t.todo),complete:!1}),t.todo.title="",t.todo.description=""))},t.editTodo=function(e,a){a.preventDefault(),a.stopPropagation(),t.todo=t.items[e].todo,t.editingTodo=!0},t.removeTodo=function(e){t.items.splice(e,1)},t.clearAll=function(){t.items=[]},t.totalCompleted=function(){return e("filter")(t.items,function(e){return e.complete}).length},t.totalPending=function(){return e("filter")(t.items,function(e){return!e.complete}).length}}var t=this;a()}angular.module("app.extras").controller("TodoController",e),e.$inject=["$filter"]}(),function(){"use strict";function e(){function e(){a.words=[{text:"Lorem",weight:13},{text:"Ipsum",weight:10.5},{text:"Dolor",weight:9.4},{text:"Sit",weight:8},{text:"Amet",weight:6.2},{text:"Consectetur",weight:5},{text:"Adipiscing",weight:5},{text:"Sit",weight:8},{text:"Amet",weight:6.2},{text:"Consectetur",weight:5},{text:"Adipiscing",weight:5}]}var a=this;e()}angular.module("app.extras").controller("WordCloudController",e)}(),function(){"use strict";function e(){function e(e,a,t){Flatdoc.run({fetcher:Flatdoc.file(t.src)});var o=$("html, body");$(document).on("flatdoc:ready",function(){var e=$('[role="flatdoc-menu"]');e.find("a").on("click",function(a){a.preventDefault(),a.stopPropagation();var t=$(this);e.find("a.active").removeClass("active"),t.addClass("active"),o.animate({scrollTop:$(this.getAttribute("href")).offset().top-($(".topnavbar").height()+10)},800)})})}var a={template:'<div role="flatdoc"><div role="flatdoc-menu"></div><div role="flatdoc-content"></div></div>',link:e,restrict:"EA"};return a}angular.module("app.flatdoc").directive("flatdoc",e)}(),function(){"use strict";function e(){function e(){a.hexPicker={color:""},a.rgbPicker={color:""},a.rgbaPicker={color:""},a.nonInput={color:""},a.resetColor=function(){a.hexPicker={color:"#ff0000"}},a.resetRBGColor=function(){a.rgbPicker={color:"rgb(255,255,255)"}},a.resetRBGAColor=function(){a.rgbaPicker={color:"rgb(255,255,255, 0.25)"}},a.resetNonInputColor=function(){a.nonInput={color:"#ffffff"}}}var a=this;e()}angular.module("app.forms").controller("ColorPickerController",e)}(),function(){"use strict";function e(){function e(e,a){var t=a.data();t.classInput=a.data("classinput")||t.classInput,a.filestyle(t)}var a={link:e,restrict:"A"};return a}angular.module("app.forms").directive("filestyle",e)}(),function(){"use strict";function e(e){function a(){t.reset=function(){t.myImage="",t.myCroppedImage="",t.imgcropType="square"},t.reset();var a=function(a){var o=a.currentTarget.files[0],n=new FileReader;n.onload=function(a){e.$apply(function(){t.myImage=a.target.result})},o&&n.readAsDataURL(o)};angular.element(document.querySelector("#fileInput")).on("change",a)}var t=this;a()}angular.module("app.forms").controller("ImageCropController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(){function e(){a.notBlackListed=function(e){var a=["some@mail.com","another@email.com"];return-1===a.indexOf(e)},a.words=function(e){return e&&e.split(" ").length},a.submitted=!1,a.validateInput=function(e,t){var o=a.formValidate[e];return(o.$dirty||a.submitted)&&o.$error[t]},a.submitForm=function(){return a.submitted=!0,a.formValidate.$valid?void console.log("Submitted!!"):(console.log("Not valid!!"),!1)}}var a=this;e()}angular.module("app.forms").controller("FormValidationController",e)}(),function(){"use strict";function e(e){function a(a,o,n){var r=e(n.validateSteps)(a),i=new t(n.steps,!!r,o);a.wizard=i.init()}function t(e,a,t){var o=this;o.quantity=parseInt(e,10),o.validate=a,o.element=t,o.init=function(){return o.createsteps(o.quantity),o.go(1),o},o.go=function(e){if(angular.isDefined(o.steps[e])){if(o.validate&&1!==e){var a=$(o.element),t=a.children().children("div").get(e-2);if(!1===a.parsley().validate(t.id))return!1}o.cleanall(),o.steps[e]=!0}},o.active=function(e){return!!o.steps[e]},o.cleanall=function(){for(var e in o.steps)o.steps[e]=!1},o.createsteps=function(e){o.steps=[];for(var a=1;e>=a;a++)o.steps[a]=!1}}var o={link:a,restrict:"A",scope:!0};return o}angular.module("app.forms").directive("formWizard",e),e.$inject=["$parse"]}(),function(){"use strict";function e(e,a,t,o,n){function r(){a.theme="bs3",t.bs3.inputClass="input-sm",t.bs3.buttonsClass="btn-sm",t.bs3.submitTpl='<button type="submit" class="btn btn-success"><span class="fa fa-check"></span></button>',t.bs3.cancelTpl='<button type="button" class="btn btn-default" ng-click="$form.$cancel()"><span class="fa fa-times text-muted"></span></button>',i.user={email:"email@example.com",tel:"123-45-67",number:29,range:10,url:"http://example.com",search:"blabla",color:"#6a4415",date:null,time:new Date,datetime:null,month:null,week:null,desc:"Sed pharetra euismod dolor, id feugiat ante volutpat eget. "},i.user2={status:2},i.statuses=[{value:1,text:"status1"},{value:2,text:"status2"},{value:3,text:"status3"},{value:4,text:"status4"}],i.showStatus=function(){var e=o("filter")(i.statuses,{value:i.user2.status});return i.user2.status&&e.length?e[0].text:"Not set"},i.user3={id:4,text:"admin"},i.groups=[],i.loadGroups=function(){return i.groups.length?null:n.get("server/xeditable-groups.json").success(function(e){i.groups=e})},e.$watch("user3.id",function(e,a){if(e!==a){var t=o("filter")(i.groups,{id:i.user3.id});i.user3.text=t.length?t[0].text:null}}),i.user4={state:"Arizona"},i.states=["Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Dakota","North Carolina","Ohio","Oklahoma","Oregon","Pennsylvania","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming"]}var i=this;i.title="Controller",r()}angular.module("app.forms").controller("FormxEditableController",e),e.$inject=["$scope","editableOptions","editableThemes","$filter","$http"]}(),function(){"use strict";function e(e){function a(){var a={get:{method:"GET",isArray:!0}},o=e("server/cities.json",{},a);o.get(function(e){t.cities=e}),t.slider1=5,t.slider2=10,t.slider3=15,t.slider4=20,t.slider5=25,t.slider6=30,t.slider7=10,t.slider8=[250,750];var n=e("server/chosen-states.json",{},{query:{method:"GET",isArray:!0}});t.states=n.query(),t.alertSubmit=function(){return alert("Form submitted!"),!1},t.wysiwygContent="<p> Write something here.. </p>",t.htmlContent='<h2>Try me!</h2><p>textAngular is a super cool WYSIWYG Text Editor directive for AngularJS</p><p><b>Features:</b></p><ol><li>Automatic Seamless Two-Way-Binding</li><li style="color: blue;">Super Easy <b>Theming</b> Options</li><li>Simple Editor Instance Creation</li><li>Safely Parses Html for Custom Toolbar Icons</li><li>Doesn&apos;t Use an iFrame</li><li>Works with Firefox, Chrome, and IE8+</li></ol><p><a href="https://github.com/fraywing/textAngular">Source</a> </p>'}var t=this;a()}angular.module("app.forms").controller("FormDemoCtrl",e),e.$inject=["$resource"]}(),function(){"use strict";function e(){function e(e,a){var t=$(a);$.fn.inputmask&&t.inputmask()}var a={link:e,restrict:"A"};return a}angular.module("app.forms").directive("masked",e)}(),function(){"use strict";function e(){function e(e,a){var t=[];return angular.isArray(e)?e.forEach(function(e){for(var o=!1,n=Object.keys(a),r=0;r<n.length;r++){var i=n[r],l=a[i].toLowerCase();if(-1!==e[i].toString().toLowerCase().indexOf(l)){o=!0;break}}o&&t.push(e)}):t=e,t}return e}angular.module("app.forms").filter("propsFilter",e)}(),function(){"use strict";function e(e){function a(a,t,o,n){t.on("itemAdded itemRemoved",function(){n.$viewValue&&n.$viewValue.split&&(n.$setViewValue(n.$viewValue.split(",")),n.$render())}),e(function(){t.tagsinput()})}var t={link:a,require:"ngModel",restrict:"A"};return t}angular.module("app.forms").directive("tagsinput",e),e.$inject=["$timeout"]}(),function(){"use strict";function e(e,a){function t(){o.disabled=void 0,o.enable=function(){o.disabled=!1},o.disable=function(){o.disabled=!0},o.clear=function(){o.person.selected=void 0,o.address.selected=void 0,o.country.selected=void 0},o.person={},o.people=[{name:"Adam",email:"adam@email.com",age:10},{name:"Amalie",email:"amalie@email.com",age:12},{name:"Wladimir",email:"wladimir@email.com",age:30},{name:"Samantha",email:"samantha@email.com",age:31},{name:"Estefanía",email:"estefanía@email.com",age:16},{name:"Natasha",email:"natasha@email.com",age:54},{name:"Nicole",email:"nicole@email.com",age:43},{name:"Adrian",email:"adrian@email.com",age:21}],o.address={},o.refreshAddresses=function(e){var t={address:e,sensor:!1};return a.get("//maps.googleapis.com/maps/api/geocode/json",{params:t}).then(function(e){o.addresses=e.data.results})},o.country={},o.countries=[{name:"Afghanistan",code:"AF"},{name:"Åland Islands",code:"AX"},{name:"Albania",code:"AL"},{name:"Algeria",code:"DZ"},{name:"American Samoa",code:"AS"},{name:"Andorra",code:"AD"},{name:"Angola",code:"AO"},{name:"Anguilla",code:"AI"},{name:"Antarctica",code:"AQ"},{name:"Antigua and Barbuda",code:"AG"},{name:"Argentina",code:"AR"},{name:"Armenia",code:"AM"},{name:"Aruba",code:"AW"},{name:"Australia",code:"AU"},{name:"Austria",code:"AT"},{name:"Azerbaijan",code:"AZ"},{name:"Bahamas",code:"BS"},{name:"Bahrain",code:"BH"},{name:"Bangladesh",code:"BD"},{name:"Barbados",code:"BB"},{name:"Belarus",code:"BY"},{name:"Belgium",code:"BE"},{name:"Belize",code:"BZ"},{name:"Benin",code:"BJ"
},{name:"Bermuda",code:"BM"},{name:"Bhutan",code:"BT"},{name:"Bolivia",code:"BO"},{name:"Bosnia and Herzegovina",code:"BA"},{name:"Botswana",code:"BW"},{name:"Bouvet Island",code:"BV"},{name:"Brazil",code:"BR"},{name:"British Indian Ocean Territory",code:"IO"},{name:"Brunei Darussalam",code:"BN"},{name:"Bulgaria",code:"BG"},{name:"Burkina Faso",code:"BF"},{name:"Burundi",code:"BI"},{name:"Cambodia",code:"KH"},{name:"Cameroon",code:"CM"},{name:"Canada",code:"CA"},{name:"Cape Verde",code:"CV"},{name:"Cayman Islands",code:"KY"},{name:"Central African Republic",code:"CF"},{name:"Chad",code:"TD"},{name:"Chile",code:"CL"},{name:"China",code:"CN"},{name:"Christmas Island",code:"CX"},{name:"Cocos (Keeling) Islands",code:"CC"},{name:"Colombia",code:"CO"},{name:"Comoros",code:"KM"},{name:"Congo",code:"CG"},{name:"Congo, The Democratic Republic of the",code:"CD"},{name:"Cook Islands",code:"CK"},{name:"Costa Rica",code:"CR"},{name:"Cote D'Ivoire",code:"CI"},{name:"Croatia",code:"HR"},{name:"Cuba",code:"CU"},{name:"Cyprus",code:"CY"},{name:"Czech Republic",code:"CZ"},{name:"Denmark",code:"DK"},{name:"Djibouti",code:"DJ"},{name:"Dominica",code:"DM"},{name:"Dominican Republic",code:"DO"},{name:"Ecuador",code:"EC"},{name:"Egypt",code:"EG"},{name:"El Salvador",code:"SV"},{name:"Equatorial Guinea",code:"GQ"},{name:"Eritrea",code:"ER"},{name:"Estonia",code:"EE"},{name:"Ethiopia",code:"ET"},{name:"Falkland Islands (Malvinas)",code:"FK"},{name:"Faroe Islands",code:"FO"},{name:"Fiji",code:"FJ"},{name:"Finland",code:"FI"},{name:"France",code:"FR"},{name:"French Guiana",code:"GF"},{name:"French Polynesia",code:"PF"},{name:"French Southern Territories",code:"TF"},{name:"Gabon",code:"GA"},{name:"Gambia",code:"GM"},{name:"Georgia",code:"GE"},{name:"Germany",code:"DE"},{name:"Ghana",code:"GH"},{name:"Gibraltar",code:"GI"},{name:"Greece",code:"GR"},{name:"Greenland",code:"GL"},{name:"Grenada",code:"GD"},{name:"Guadeloupe",code:"GP"},{name:"Guam",code:"GU"},{name:"Guatemala",code:"GT"},{name:"Guernsey",code:"GG"},{name:"Guinea",code:"GN"},{name:"Guinea-Bissau",code:"GW"},{name:"Guyana",code:"GY"},{name:"Haiti",code:"HT"},{name:"Heard Island and Mcdonald Islands",code:"HM"},{name:"Holy See (Vatican City State)",code:"VA"},{name:"Honduras",code:"HN"},{name:"Hong Kong",code:"HK"},{name:"Hungary",code:"HU"},{name:"Iceland",code:"IS"},{name:"India",code:"IN"},{name:"Indonesia",code:"ID"},{name:"Iran, Islamic Republic Of",code:"IR"},{name:"Iraq",code:"IQ"},{name:"Ireland",code:"IE"},{name:"Isle of Man",code:"IM"},{name:"Israel",code:"IL"},{name:"Italy",code:"IT"},{name:"Jamaica",code:"JM"},{name:"Japan",code:"JP"},{name:"Jersey",code:"JE"},{name:"Jordan",code:"JO"},{name:"Kazakhstan",code:"KZ"},{name:"Kenya",code:"KE"},{name:"Kiribati",code:"KI"},{name:"Korea, Democratic People's Republic of",code:"KP"},{name:"Korea, Republic of",code:"KR"},{name:"Kuwait",code:"KW"},{name:"Kyrgyzstan",code:"KG"},{name:"Lao People's Democratic Republic",code:"LA"},{name:"Latvia",code:"LV"},{name:"Lebanon",code:"LB"},{name:"Lesotho",code:"LS"},{name:"Liberia",code:"LR"},{name:"Libyan Arab Jamahiriya",code:"LY"},{name:"Liechtenstein",code:"LI"},{name:"Lithuania",code:"LT"},{name:"Luxembourg",code:"LU"},{name:"Macao",code:"MO"},{name:"Macedonia, The Former Yugoslav Republic of",code:"MK"},{name:"Madagascar",code:"MG"},{name:"Malawi",code:"MW"},{name:"Malaysia",code:"MY"},{name:"Maldives",code:"MV"},{name:"Mali",code:"ML"},{name:"Malta",code:"MT"},{name:"Marshall Islands",code:"MH"},{name:"Martinique",code:"MQ"},{name:"Mauritania",code:"MR"},{name:"Mauritius",code:"MU"},{name:"Mayotte",code:"YT"},{name:"Mexico",code:"MX"},{name:"Micronesia, Federated States of",code:"FM"},{name:"Moldova, Republic of",code:"MD"},{name:"Monaco",code:"MC"},{name:"Mongolia",code:"MN"},{name:"Montserrat",code:"MS"},{name:"Morocco",code:"MA"},{name:"Mozambique",code:"MZ"},{name:"Myanmar",code:"MM"},{name:"Namibia",code:"NA"},{name:"Nauru",code:"NR"},{name:"Nepal",code:"NP"},{name:"Netherlands",code:"NL"},{name:"Netherlands Antilles",code:"AN"},{name:"New Caledonia",code:"NC"},{name:"New Zealand",code:"NZ"},{name:"Nicaragua",code:"NI"},{name:"Niger",code:"NE"},{name:"Nigeria",code:"NG"},{name:"Niue",code:"NU"},{name:"Norfolk Island",code:"NF"},{name:"Northern Mariana Islands",code:"MP"},{name:"Norway",code:"NO"},{name:"Oman",code:"OM"},{name:"Pakistan",code:"PK"},{name:"Palau",code:"PW"},{name:"Palestinian Territory, Occupied",code:"PS"},{name:"Panama",code:"PA"},{name:"Papua New Guinea",code:"PG"},{name:"Paraguay",code:"PY"},{name:"Peru",code:"PE"},{name:"Philippines",code:"PH"},{name:"Pitcairn",code:"PN"},{name:"Poland",code:"PL"},{name:"Portugal",code:"PT"},{name:"Puerto Rico",code:"PR"},{name:"Qatar",code:"QA"},{name:"Reunion",code:"RE"},{name:"Romania",code:"RO"},{name:"Russian Federation",code:"RU"},{name:"Rwanda",code:"RW"},{name:"Saint Helena",code:"SH"},{name:"Saint Kitts and Nevis",code:"KN"},{name:"Saint Lucia",code:"LC"},{name:"Saint Pierre and Miquelon",code:"PM"},{name:"Saint Vincent and the Grenadines",code:"VC"},{name:"Samoa",code:"WS"},{name:"San Marino",code:"SM"},{name:"Sao Tome and Principe",code:"ST"},{name:"Saudi Arabia",code:"SA"},{name:"Senegal",code:"SN"},{name:"Serbia and Montenegro",code:"CS"},{name:"Seychelles",code:"SC"},{name:"Sierra Leone",code:"SL"},{name:"Singapore",code:"SG"},{name:"Slovakia",code:"SK"},{name:"Slovenia",code:"SI"},{name:"Solomon Islands",code:"SB"},{name:"Somalia",code:"SO"},{name:"South Africa",code:"ZA"},{name:"South Georgia and the South Sandwich Islands",code:"GS"},{name:"Spain",code:"ES"},{name:"Sri Lanka",code:"LK"},{name:"Sudan",code:"SD"},{name:"Suriname",code:"SR"},{name:"Svalbard and Jan Mayen",code:"SJ"},{name:"Swaziland",code:"SZ"},{name:"Sweden",code:"SE"},{name:"Switzerland",code:"CH"},{name:"Syrian Arab Republic",code:"SY"},{name:"Taiwan, Province of China",code:"TW"},{name:"Tajikistan",code:"TJ"},{name:"Tanzania, United Republic of",code:"TZ"},{name:"Thailand",code:"TH"},{name:"Timor-Leste",code:"TL"},{name:"Togo",code:"TG"},{name:"Tokelau",code:"TK"},{name:"Tonga",code:"TO"},{name:"Trinidad and Tobago",code:"TT"},{name:"Tunisia",code:"TN"},{name:"Turkey",code:"TR"},{name:"Turkmenistan",code:"TM"},{name:"Turks and Caicos Islands",code:"TC"},{name:"Tuvalu",code:"TV"},{name:"Uganda",code:"UG"},{name:"Ukraine",code:"UA"},{name:"United Arab Emirates",code:"AE"},{name:"United Kingdom",code:"GB"},{name:"United States",code:"US"},{name:"United States Minor Outlying Islands",code:"UM"},{name:"Uruguay",code:"UY"},{name:"Uzbekistan",code:"UZ"},{name:"Vanuatu",code:"VU"},{name:"Venezuela",code:"VE"},{name:"Vietnam",code:"VN"},{name:"Virgin Islands, British",code:"VG"},{name:"Virgin Islands, U.S.",code:"VI"},{name:"Wallis and Futuna",code:"WF"},{name:"Western Sahara",code:"EH"},{name:"Yemen",code:"YE"},{name:"Zambia",code:"ZM"},{name:"Zimbabwe",code:"ZW"}],o.someGroupFn=function(e){return e.name[0]>="A"&&e.name[0]<="M"?"From A - M":e.name[0]>="N"&&e.name[0]<="Z"?"From N - Z":void 0},o.counter=0,o.someFunction=function(e,a){o.counter++,o.eventResult={item:e,model:a}},o.availableColors=["Red","Green","Blue","Yellow","Magenta","Maroon","Umbra","Turquoise"],o.multipleDemo={},o.multipleDemo.colors=["Blue","Red"],o.multipleDemo.selectedPeople=[o.people[5],o.people[4]],o.multipleDemo.selectedPeopleWithGroupBy=[o.people[8],o.people[6]],o.multipleDemo.selectedPeopleSimple=["samantha@email.com","wladimir@email.com"]}var o=this;t()}angular.module("app.forms").controller("uiSelectController",e),e.$inject=["$scope","$http"]}(),function(){"use strict";function e(e){function a(){var a=t.uploader=new e({url:"server/upload.php"});a.filters.push({name:"customFilter",fn:function(){return this.queue.length<10}}),a.onWhenAddingFileFailed=function(e,a,t){console.info("onWhenAddingFileFailed",e,a,t)},a.onAfterAddingFile=function(e){console.info("onAfterAddingFile",e)},a.onAfterAddingAll=function(e){console.info("onAfterAddingAll",e)},a.onBeforeUploadItem=function(e){console.info("onBeforeUploadItem",e)},a.onProgressItem=function(e,a){console.info("onProgressItem",e,a)},a.onProgressAll=function(e){console.info("onProgressAll",e)},a.onSuccessItem=function(e,a,t,o){console.info("onSuccessItem",e,a,t,o)},a.onErrorItem=function(e,a,t,o){console.info("onErrorItem",e,a,t,o)},a.onCancelItem=function(e,a,t,o){console.info("onCancelItem",e,a,t,o)},a.onCompleteItem=function(e,a,t,o){console.info("onCompleteItem",e,a,t,o)},a.onCompleteAll=function(){console.info("onCompleteAll")},console.info("uploader",a)}var t=this;a()}angular.module("app.forms").controller("FileUploadController",e),e.$inject=["FileUploader"]}(),function(){"use strict";function e(){function e(e,a){var t=$(a);$.fn.parsley&&t.parsley()}var a={link:e,restrict:"A"};return a}angular.module("app.forms").directive("validateForm",e)}(),function(){"use strict";function e(e,a){e.config({debug:!1,events:!0,modules:a.modules})}angular.module("app.lazyload").config(e),e.$inject=["$ocLazyLoadProvider","APP_REQUIRES"]}(),function(){"use strict";angular.module("app.lazyload").constant("APP_REQUIRES",{scripts:{whirl:["vendor/whirl/dist/whirl.css"],classyloader:["vendor/jquery-classyloader/js/jquery.classyloader.min.js"],animo:["vendor/animo.js/animo.js"],fastclick:["vendor/fastclick/lib/fastclick.js"],modernizr:["vendor/modernizr/modernizr.custom.js"],animate:["vendor/animate.css/animate.min.css"],skycons:["vendor/skycons/skycons.js"],icons:["vendor/fontawesome/css/font-awesome.min.css","vendor/simple-line-icons/css/simple-line-icons.css"],"weather-icons":["vendor/weather-icons/css/weather-icons.min.css","vendor/weather-icons/css/weather-icons-wind.min.css"],sparklines:["vendor/sparkline/index.js"],wysiwyg:["vendor/bootstrap-wysiwyg/bootstrap-wysiwyg.js","vendor/bootstrap-wysiwyg/external/jquery.hotkeys.js"],slimscroll:["vendor/slimScroll/jquery.slimscroll.min.js"],screenfull:["vendor/screenfull/dist/screenfull.js"],"vector-map":["vendor/ika.jvectormap/jquery-jvectormap-1.2.2.min.js","vendor/ika.jvectormap/jquery-jvectormap-1.2.2.css"],"vector-map-maps":["vendor/ika.jvectormap/jquery-jvectormap-world-mill-en.js","vendor/ika.jvectormap/jquery-jvectormap-us-mill-en.js"],loadGoogleMapsJS:["vendor/load-google-maps/load-google-maps.js"],"flot-chart":["vendor/Flot/jquery.flot.js"],"flot-chart-plugins":["vendor/flot.tooltip/js/jquery.flot.tooltip.min.js","vendor/Flot/jquery.flot.resize.js","vendor/Flot/jquery.flot.pie.js","vendor/Flot/jquery.flot.time.js","vendor/Flot/jquery.flot.categories.js","vendor/flot-spline/js/jquery.flot.spline.min.js"],"jquery-ui":["vendor/jquery-ui/ui/core.js","vendor/jquery-ui/ui/widget.js"],"jquery-ui-widgets":["vendor/jquery-ui/ui/core.js","vendor/jquery-ui/ui/widget.js","vendor/jquery-ui/ui/mouse.js","vendor/jquery-ui/ui/draggable.js","vendor/jquery-ui/ui/droppable.js","vendor/jquery-ui/ui/sortable.js","vendor/jqueryui-touch-punch/jquery.ui.touch-punch.min.js"],moment:["vendor/moment/min/moment-with-locales.min.js"],inputmask:["vendor/jquery.inputmask/dist/jquery.inputmask.bundle.js"],flatdoc:["vendor/flatdoc/flatdoc.js"],codemirror:["vendor/codemirror/lib/codemirror.js","vendor/codemirror/lib/codemirror.css"],"codemirror-modes-web":["vendor/codemirror/mode/javascript/javascript.js","vendor/codemirror/mode/xml/xml.js","vendor/codemirror/mode/htmlmixed/htmlmixed.js","vendor/codemirror/mode/css/css.js"],taginput:["vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.css","vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js"],filestyle:["vendor/bootstrap-filestyle/src/bootstrap-filestyle.js"],parsley:["vendor/parsleyjs/dist/parsley.min.js"],fullcalendar:["vendor/fullcalendar/dist/fullcalendar.min.js","vendor/fullcalendar/dist/fullcalendar.css"],gcal:["vendor/fullcalendar/dist/gcal.js"],chartjs:["vendor/Chart.js/Chart.js"],morris:["vendor/raphael/raphael.js","vendor/morris.js/morris.js","vendor/morris.js/morris.css"],"loaders.css":["vendor/loaders.css/loaders.css"],spinkit:["vendor/spinkit/css/spinkit.css"]},modules:[{name:"toaster",files:["vendor/angularjs-toaster/toaster.js","vendor/angularjs-toaster/toaster.css"]},{name:"localytics.directives",files:["vendor/chosen_v1.2.0/chosen.jquery.min.js","vendor/chosen_v1.2.0/chosen.min.css","vendor/angular-chosen-localytics/chosen.js"]},{name:"ngDialog",files:["vendor/ngDialog/js/ngDialog.min.js","vendor/ngDialog/css/ngDialog.min.css","vendor/ngDialog/css/ngDialog-theme-default.min.css"]},{name:"ngWig",files:["vendor/ngWig/dist/ng-wig.min.js"]},{name:"ngTable",files:["vendor/ng-table/dist/ng-table.min.js","vendor/ng-table/dist/ng-table.min.css"]},{name:"ngTableExport",files:["vendor/ng-table-export/ng-table-export.js"]},{name:"angularBootstrapNavTree",files:["vendor/angular-bootstrap-nav-tree/dist/abn_tree_directive.js","vendor/angular-bootstrap-nav-tree/dist/abn_tree.css"]},{name:"htmlSortable",files:["vendor/html.sortable/dist/html.sortable.js","vendor/html.sortable/dist/html.sortable.angular.js"]},{name:"xeditable",files:["vendor/angular-xeditable/dist/js/xeditable.js","vendor/angular-xeditable/dist/css/xeditable.css"]},{name:"angularFileUpload",files:["vendor/angular-file-upload/dist/angular-file-upload.js"]},{name:"ngImgCrop",files:["vendor/ng-img-crop/compile/unminified/ng-img-crop.js","vendor/ng-img-crop/compile/unminified/ng-img-crop.css"]},{name:"ui.select",files:["vendor/angular-ui-select/dist/select.js","vendor/angular-ui-select/dist/select.css"]},{name:"ui.codemirror",files:["vendor/angular-ui-codemirror/ui-codemirror.js"]},{name:"angular-carousel",files:["vendor/angular-carousel/dist/angular-carousel.css","vendor/angular-carousel/dist/angular-carousel.js"]},{name:"infinite-scroll",files:["vendor/ngInfiniteScroll/build/ng-infinite-scroll.js"]},{name:"ui.bootstrap-slider",files:["vendor/seiyria-bootstrap-slider/dist/bootstrap-slider.min.js","vendor/seiyria-bootstrap-slider/dist/css/bootstrap-slider.min.css","vendor/angular-bootstrap-slider/slider.js"]},{name:"ui.grid",files:["vendor/angular-ui-grid/ui-grid.min.css","vendor/angular-ui-grid/ui-grid.min.js"]},{name:"textAngular",files:["vendor/textAngular/dist/textAngular.css","vendor/textAngular/dist/textAngular-rangy.min.js","vendor/textAngular/dist/textAngular-sanitize.js","vendor/textAngular/src/globals.js","vendor/textAngular/src/factories.js","vendor/textAngular/src/DOM.js","vendor/textAngular/src/validators.js","vendor/textAngular/src/taBind.js","vendor/textAngular/src/main.js","vendor/textAngular/dist/textAngularSetup.js"],serie:!0},{name:"angular-rickshaw",files:["vendor/d3/d3.min.js","vendor/rickshaw/rickshaw.js","vendor/rickshaw/rickshaw.min.css","vendor/angular-rickshaw/rickshaw.js"],serie:!0},{name:"angular-chartist",files:["vendor/chartist/dist/chartist.min.css","vendor/chartist/dist/chartist.js","vendor/angular-chartist.js/dist/angular-chartist.js"],serie:!0},{name:"ui.map",files:["vendor/angular-ui-map/ui-map.js"]},{name:"datatables",files:["vendor/datatables/media/css/jquery.dataTables.css","vendor/datatables/media/js/jquery.dataTables.js","vendor/angular-datatables/dist/angular-datatables.js"],serie:!0},{name:"angular-jqcloud",files:["vendor/jqcloud2/dist/jqcloud.css","vendor/jqcloud2/dist/jqcloud.js","vendor/angular-jqcloud/angular-jqcloud.js"]},{name:"angularGrid",files:["vendor/ag-grid/dist/ag-grid.css","vendor/ag-grid/dist/ag-grid.js","vendor/ag-grid/dist/theme-dark.css","vendor/ag-grid/dist/theme-fresh.css"]},{name:"ng-nestable",files:["vendor/ng-nestable/src/angular-nestable.js","vendor/nestable/jquery.nestable.js"]},{name:"akoenig.deckgrid",files:["vendor/angular-deckgrid/angular-deckgrid.js"]},{name:"oitozero.ngSweetAlert",files:["vendor/sweetalert/dist/sweetalert.css","vendor/sweetalert/dist/sweetalert.min.js","vendor/angular-sweetalert/SweetAlert.js"]},{name:"bm.bsTour",files:["vendor/bootstrap-tour/build/css/bootstrap-tour.css","vendor/bootstrap-tour/build/js/bootstrap-tour-standalone.js","vendor/angular-bootstrap-tour/dist/angular-bootstrap-tour.js"],serie:!0},{name:"ui.knob",files:["vendor/angular-knob/src/angular-knob.js","vendor/jquery-knob/dist/jquery.knob.min.js"]},{name:"easypiechart",files:["vendor/jquery.easy-pie-chart/dist/angular.easypiechart.min.js"]},{name:"colorpicker.module",files:["vendor/angular-bootstrap-colorpicker/css/colorpicker.css","vendor/angular-bootstrap-colorpicker/js/bootstrap-colorpicker-module.js"]}]})}(),function(){"use strict";function e(){function e(e,a,t){var o=new Skycons({color:t.color||"white"});a.html('<canvas width="'+t.width+'" height="'+t.height+'"></canvas>'),o.add(a.children()[0],t.skycon),o.play()}var a={link:e,restrict:"A"};return a}angular.module("app.icons").directive("skycon",e)}(),function(){"use strict";function e(e){e.localeLocationPattern("vendor/angular-i18n/angular-locale_{{locale}}.js")}angular.module("app.locale").config(e),e.$inject=["tmhDynamicLocaleProvider"]}(),function(){"use strict";function e(e,a,t){function o(){e.availableLocales={en:"English",es:"Spanish",de:"German",fr:"French",ar:"Arabic",ja:"Japanese",ko:"Korean",zh:"Chinese"},e.model={selectedLocale:"en"},e.$locale=t,e.changeLocale=a.set}o()}angular.module("app.locale").controller("LocalizationController",e),e.$inject=["$rootScope","tmhDynamicLocale","$locale"]}(),function(){"use strict";function e(e){e.includeBar=!0,e.includeSpinner=!1,e.latencyThreshold=500,e.parentSelector=".wrapper > section"}angular.module("app.loadingbar").config(e),e.$inject=["cfpLoadingBarProvider"]}(),function(){"use strict";function e(e,a,t){var o;e.$on("$stateChangeStart",function(){$(".wrapper > section").length&&(o=a(function(){t.start()},0))}),e.$on("$stateChangeSuccess",function(e){e.targetScope.$watch("$viewContentLoaded",function(){a.cancel(o),t.complete()})})}angular.module("app.loadingbar").run(e),e.$inject=["$rootScope","$timeout","cfpLoadingBar"]}(),function(){"use strict";function e(){function e(){a.folders=[{name:"Inbox",folder:"inbox",alert:42,icon:"fa-inbox"},{name:"Starred",folder:"starred",alert:10,icon:"fa-star"},{name:"Sent",folder:"sent",alert:0,icon:"fa-paper-plane-o"},{name:"Draft",folder:"draft",alert:5,icon:"fa-edit"},{name:"Trash",folder:"trash",alert:0,icon:"fa-trash"}],a.labels=[{name:"Red",color:"danger"},{name:"Pink",color:"pink"},{name:"Blue",color:"info"},{name:"Yellow",color:"warning"}],a.mail={cc:!1,bcc:!1},a.content="<p>Type something..</p>"}var a=this;e()}angular.module("app.mailbox").controller("MailboxController",e)}(),function(){"use strict";function e(e,a){function t(){o.folder={},o.folder.folder="inbox"===a.folder?"":a.folder,e.all().then(function(e){o.mails=e})}var o=this;t()}angular.module("app.mailbox").controller("MailFolderController",e),e.$inject=["mails","$stateParams"]}(),function(){"use strict";function e(e){function a(){var a="server/mails.json";return e.get(a).then(function(e){return e.data.mails})}function t(){return a()}function o(e){return a().then(function(a){for(var t=0;t<a.length;t++)if(+a[t].id===+e)return a[t];return null})}var n={all:t,get:o};return n}angular.module("app.mailbox").factory("mails",e),e.$inject=["$http"]}(),function(){"use strict";function e(e,a){function t(){e.get(a.mid).then(function(e){o.mail=e})}var o=this;t()}angular.module("app.mailbox").controller("MailViewController",e),e.$inject=["mails","$stateParams"]}(),function(){"use strict";function e(e){function a(){function a(e,a,t){a.opened.then(function(){var a=new google.maps.LatLng(33.790807,-117.835734);e.mapOptionsModal={zoom:14,center:a,mapTypeId:google.maps.MapTypeId.ROADMAP},t(function(){new google.maps.Marker({map:e.myMapModal,position:a}),google.maps.event.trigger(e.myMapModal,"resize"),e.myMapModal.panTo(a)})}),e.ok=function(){a.close("closed")},e.cancel=function(){a.dismiss("cancel")}}t.open=function(t){e.open({templateUrl:"/myModalContent.html",controller:a,size:t})},a.$inject=["$scope","$uibModalInstance","$timeout"]}var t=this;a()}angular.module("app.maps").controller("ModalGmapController",e),e.$inject=["$uibModal"]}(),function(){"use strict";function e(e){function a(){function a(e,a){return new google.maps.Marker({map:e,position:a})}var o=[new google.maps.LatLng(33.790807,-117.835734),new google.maps.LatLng(33.790807,-117.835734),new google.maps.LatLng(33.790807,-117.835734),new google.maps.LatLng(33.790807,-117.835734),new google.maps.LatLng(33.787453,-117.835858)];t.addMarker=a,e(function(){a(t.myMap1,o[0]),a(t.myMap2,o[1]),a(t.myMap3,o[2]),a(t.myMap5,o[3])}),t.mapOptions1={zoom:14,center:o[0],mapTypeId:google.maps.MapTypeId.ROADMAP,scrollwheel:!1},t.mapOptions2={zoom:19,center:o[1],mapTypeId:google.maps.MapTypeId.ROADMAP},t.mapOptions3={zoom:14,center:o[2],mapTypeId:google.maps.MapTypeId.SATELLITE},t.mapOptions4={zoom:14,center:o[3],mapTypeId:google.maps.MapTypeId.ROADMAP},e(function(){a(t.myMap4,o[3]),a(t.myMap4,o[4])});var n=[{featureType:"water",stylers:[{visibility:"on"},{color:"#bdd1f9"}]},{featureType:"all",elementType:"labels.text.fill",stylers:[{color:"#334165"}]},{featureType:"landscape",stylers:[{color:"#e9ebf1"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{color:"#c5c6c6"}]},{featureType:"road.arterial",elementType:"geometry",stylers:[{color:"#fff"}]},{featureType:"road.local",elementType:"geometry",stylers:[{color:"#fff"}]},{featureType:"transit",elementType:"geometry",stylers:[{color:"#d8dbe0"}]},{featureType:"poi",elementType:"geometry",stylers:[{color:"#cfd5e0"}]},{featureType:"administrative",stylers:[{visibility:"on"},{lightness:33}]},{featureType:"poi.park",elementType:"labels",stylers:[{visibility:"on"},{lightness:20}]},{featureType:"road",stylers:[{color:"#d8dbe0",lightness:20}]}];t.mapOptions5={zoom:14,center:o[3],styles:n,mapTypeId:google.maps.MapTypeId.ROADMAP,scrollwheel:!1}}var t=this;a()}angular.module("app.maps").controller("GMapController",e),e.$inject=["$timeout"]}(),function(){"use strict";function e(e){function a(a,t,o){var n={markerColor:"#23b7e5",bgColor:"transparent",scaleColors:["#878c9a"],regionFill:"#bbbec6"},r=o.height||"300",i={markerColor:o.markerColor||n.markerColor,bgColor:o.bgColor||n.bgColor,scale:o.scale||1,scaleColors:o.scaleColors||n.scaleColors,regionFill:o.regionFill||n.regionFill,mapName:o.mapName||"world_mill_en"};t.css("height",r),e.init(t,i,a.seriesData,a.markersData)}var t={link:a,restrict:"EA",scope:{seriesData:"=",markersData:"="}};return t}angular.module("app.maps").directive("vectorMap",e),e.$inject=["VectorMap"]}(),function(){"use strict";function e(){function e(e,a,t,o){e.vectorMap({map:a.mapName,backgroundColor:a.bgColor,zoomMin:1,zoomMax:8,zoomOnScroll:!1,regionStyle:{initial:{fill:a.regionFill,"fill-opacity":1,stroke:"none","stroke-width":1.5,"stroke-opacity":1},hover:{"fill-opacity":.8},selected:{fill:"blue"},selectedHover:{}},focusOn:{x:.4,y:.6,scale:a.scale},markerStyle:{initial:{fill:a.markerColor,stroke:a.markerColor}},onRegionLabelShow:function(e,a,o){t&&t[o]&&a.html(a.html()+": "+t[o]+" visitors")},markers:o,series:{regions:[{values:t,scale:a.scaleColors,normalizeFunction:"polynomial"}]}})}this.init=e}angular.module("app.maps").service("VectorMap",e)}(),function(){"use strict";function e(){function e(){a.seriesData={CA:11100,DE:2510,FR:3710,AU:5710,GB:8310,RU:9310,BR:6610,IN:7810,CN:4310,US:839,SA:410},a.markersData=[{latLng:[41.9,12.45],name:"Vatican City"},{latLng:[43.73,7.41],name:"Monaco"},{latLng:[-.52,166.93],name:"Nauru"},{latLng:[-8.51,179.21],name:"Tuvalu"},{latLng:[7.11,171.06],name:"Marshall Islands"},{latLng:[17.3,-62.73],name:"Saint Kitts and Nevis"},{latLng:[3.2,73.22],name:"Maldives"},{latLng:[35.88,14.5],name:"Malta"},{latLng:[41,-71.06],name:"New England"},{latLng:[12.05,-61.75],name:"Grenada"},{latLng:[13.16,-59.55],name:"Barbados"},{latLng:[17.11,-61.85],name:"Antigua and Barbuda"},{latLng:[-4.61,55.45],name:"Seychelles"},{latLng:[7.35,134.46],name:"Palau"},{latLng:[42.5,1.51],name:"Andorra"}]}var a=this;e()}angular.module("app.maps").controller("VectorMapController",e)}(),function(){"use strict";function e(){var e={controller:t,restrict:"A"};return e}function a(){var e={controller:o,restrict:"A"};return e}function t(e,a,t){a.on("click",function(e){e.stopPropagation()}).on("click",t.toggle)}function o(e,a,t){var o='.navbar-form input[type="text"]';$(o).on("click",function(e){e.stopPropagation()}).on("keyup",function(e){27===e.keyCode&&t.dismiss()}),$(document).on("click",t.dismiss),a.on("click",function(e){e.stopPropagation()}).on("click",t.dismiss)}angular.module("app.navsearch").directive("searchOpen",e).directive("searchDismiss",a),t.$inject=["$scope","$element","NavSearch"],o.$inject=["$scope","$element","NavSearch"]}(),function(){"use strict";function e(){function e(){var e=$(t);e.toggleClass("open");var a=e.hasClass("open");e.find("input")[a?"focus":"blur"]()}function a(){$(t).removeClass("open").find('input[type="text"]').blur().val("")}this.toggle=e,this.dismiss=a;var t="form.navbar-form"}angular.module("app.navsearch").service("NavSearch",e)}(),function(){"use strict";function e(e,a){function t(){o.msgHtml='<em class="fa fa-check"></em> Message with icon..',o.notifyMsg="Some messages here..",o.notifyOpts={status:"danger",pos:"bottom-center"},a(function(){e.alert("This is a custom message from notify..",{status:"success"})},500)}var o=this;t()}angular.module("app.notify").controller("NotifyDemoCtrl",e),e.$inject=["Notify","$timeout"]}(),function(){"use strict";function e(e,a){function t(e,t){t.on("click",function(t){t.preventDefault(),a.alert(e.message,e.options)})}var o={link:t,restrict:"A",scope:{options:"=",message:"="}};return o}angular.module("app.notify").directive("notify",e),e.$inject=["$window","Notify"]}(),function(){"use strict";function e(e){function a(a,t){a&&e(function(){$.notify(a,t||{})})}this.alert=a}angular.module("app.notify").service("Notify",e),e.$inject=["$timeout"]}(),function(e){"use strict";var a={},t={},o=function(a){return"string"===e.type(a)&&(a={message:a}),arguments[1]&&(a=e.extend(a,"string"===e.type(arguments[1])?{status:arguments[1]}:arguments[1])),new r(a).show()},n=function(e,a){var o;if(e)for(o in t)e===t[o].group&&t[o].close(a);else for(o in t)t[o].close(a)},r=function(o){this.options=e.extend({},r.defaults,o),this.uuid="ID"+(new Date).getTime()+"RAND"+Math.ceil(1e5*Math.random()),this.element=e(['<div class="uk-notify-message alert-dismissable">','<a class="close">&times;</a>',"<div>"+this.options.message+"</div>","</div>"].join("")).data("notifyMessage",this),this.options.status&&(this.element.addClass("alert alert-"+this.options.status),this.currentstatus=this.options.status),this.group=this.options.group,t[this.uuid]=this,a[this.options.pos]||(a[this.options.pos]=e('<div class="uk-notify uk-notify-'+this.options.pos+'"></div>').appendTo("body").on("click",".uk-notify-message",function(){e(this).data("notifyMessage").close()}))};return e.extend(r.prototype,{uuid:!1,element:!1,timout:!1,currentstatus:"",group:!1,show:function(){if(!this.element.is(":visible")){var e=this;a[this.options.pos].show().prepend(this.element);var t=parseInt(this.element.css("margin-bottom"),10);return this.element.css({opacity:0,"margin-top":-1*this.element.outerHeight(),"margin-bottom":0}).animate({opacity:1,"margin-top":0,"margin-bottom":t},function(){if(e.options.timeout){var a=function(){e.close()};e.timeout=setTimeout(a,e.options.timeout),e.element.hover(function(){clearTimeout(e.timeout)},function(){e.timeout=setTimeout(a,e.options.timeout)})}}),this}},close:function(e){var o=this,n=function(){o.element.remove(),a[o.options.pos].children().length||a[o.options.pos].hide(),delete t[o.uuid]};this.timeout&&clearTimeout(this.timeout),e?n():this.element.animate({opacity:0,"margin-top":-1*this.element.outerHeight(),"margin-bottom":0},function(){n()})},content:function(e){var a=this.element.find(">div");return e?(a.html(e),this):a.html()},status:function(e){return e?(this.element.removeClass("alert alert-"+this.currentstatus).addClass("alert alert-"+e),this.currentstatus=e,this):this.currentstatus}}),r.defaults={message:"",status:"normal",timeout:5e3,group:null,pos:"top-center"},e.notify=o,e.notify.message=r,e.notify.closeAll=n,o}(jQuery),function(){"use strict";function e(e,a){function t(){o.account={},o.authMsg="",o.login=function(){o.authMsg="",o.loginForm.$valid?e.post("api/account/login",{email:o.account.email,password:o.account.password}).then(function(e){e.account?a.go("app.dashboard"):o.authMsg="Incorrect credentials."},function(){o.authMsg="Server Request Error"}):(o.loginForm.account_email.$dirty=!0,o.loginForm.account_password.$dirty=!0)}}var o=this;t()}angular.module("app.pages").controller("LoginFormController",e),e.$inject=["$http","$state"]}(),function(){"use strict";function e(e,a){function t(){o.account={},o.authMsg="",o.register=function(){o.authMsg="",o.registerForm.$valid?e.post("api/account/register",{email:o.account.email,password:o.account.password}).then(function(e){e.account?a.go("app.dashboard"):o.authMsg=e},function(){o.authMsg="Server Request Error"}):(o.registerForm.account_email.$dirty=!0,o.registerForm.account_password.$dirty=!0,o.registerForm.account_agreed.$dirty=!0)}}var o=this;t()}angular.module("app.pages").controller("RegisterFormController",e),e.$inject=["$http","$state"]}(),function(){"use strict";function e(){var e={controller:a,restrict:"A",scope:!1};return e}function a(e,a,t,o){function n(e,a){if(!e)return!1;var t=angular.fromJson(o[i]);t||(t={}),t[e]=a,o[i]=angular.toJson(t)}function r(e){if(!e)return!1;var a=angular.fromJson(o[i]);return a?a[e]:void 0}var i="panelState",l=$(a),s=l.closest(".panel"),c=s.attr("id"),u=r(c);"undefined"!=typeof u&&t(function(){e[c]=u},10),a.bind("click",function(a){a.preventDefault(),n(c,!e[c])})}angular.module("app.panels").directive("panelCollapse",e),a.$inject=["$scope","$element","$timeout","$localStorage"]}(),function(){"use strict";function e(){var e={controller:a,restrict:"A"};return e}function a(e,a,t,o){var n="panel-remove",r="panel-removed";a.on("click",function(a){function i(){var a=t.defer(),o=a.promise;e.$emit(n,c.attr("id"),a),o.then(l)}function l(){o.support.animation?c.animo({animation:"bounceOut"},s):s()}function s(){var a=c.parent();c.remove(),a.filter(function(){var e=$(this);return e.is('[class*="col-"]:not(.sortable)')&&0===e.children("*").length}).remove(),e.$emit(r,c.attr("id"))}a.preventDefault();var c=$(this).closest(".panel");i()})}angular.module("app.panels").directive("panelDismiss",e),a.$inject=["$scope","$element","$q","Utils"]}(),function(){"use strict";function e(){var e={controller:a,restrict:"A",scope:!1};return e}function a(e,a){function t(e,a){if(a){var t="#"===a.charAt(0)?a:"#"+a;angular.element(t).removeClass(n)}}var o="panel-refresh",n="whirl",r="standard";a.on("click",function(a){a.preventDefault();var t=$(this),i=t.parents(".panel").eq(0),l=t.data("spinner")||r;i.addClass(n+" "+l),e.$emit(o,i.attr("id"))}),e.$on("removeSpinner",t)}angular.module("app.panels").directive("panelRefresh",e),a.$inject=["$scope","$element"]}(),function(){"use strict";function e(e,a){function t(t,o,n){function r(e,a){var t="";return a=a||{},a.toolCollapse&&(t+=i.collapse.replace(/{{panelId}}/g,e.parent().parent().attr("id"))),a.toolDismiss&&(t+=i.dismiss),a.toolRefresh&&(t+=i.refresh.replace(/{{spinner}}/g,a.toolRefresh)),t}var i={collapse:'<a href="#" panel-collapse="" uib-tooltip="Collapse Panel" ng-click="{{panelId}} = !{{panelId}}">                         <em ng-show="{{panelId}}" class="fa fa-plus ng-no-animation"></em>                         <em ng-show="!{{panelId}}" class="fa fa-minus ng-no-animation"></em>                       </a>',dismiss:'<a href="#" panel-dismiss="" uib-tooltip="Close Panel">                       <em class="fa fa-times"></em>                     </a>',refresh:'<a href="#" panel-refresh="" data-spinner="{{spinner}}" uib-tooltip="Refresh Panel">                       <em class="fa fa-refresh"></em>                     </a>'},l=t.panelTools||n;a(function(){o.html(r(o,l)).show(),e(o.contents())(t),o.addClass("pull-right")})}var o={link:t,restrict:"E",scope:!1};return o}angular.module("app.panels").directive("paneltool",e),e.$inject=["$compile","$timeout"];
}(),function(){"use strict";function e(e,a){function t(){e.$watch("panelDemo1",function(e){console.log("panelDemo1 collapsed: "+e)}),e.$on("panel-remove",function(e,a,t){console.log("Panel #"+a+" removing"),t.resolve()}),e.$on("panel-removed",function(e,a){console.log("Panel #"+a+" removed")}),e.$on("panel-refresh",function(t,o){var n=3;console.log("Refreshing during "+n+"s #"+o),a(function(){e.$broadcast("removeSpinner",o),console.log("Refreshed #"+o)},3e3)}),e.panels=[{id:"panelRepeat1",title:"Panel Title 1",body:"Nulla eget lorem leo, sit amet elementum lorem. "},{id:"panelRepeat2",title:"Panel Title 2",body:"Nulla eget lorem leo, sit amet elementum lorem. "},{id:"panelRepeat3",title:"Panel Title 3",body:"Nulla eget lorem leo, sit amet elementum lorem. "}]}t()}angular.module("app.panels").controller("PanelsCtrl",e),e.$inject=["$scope","$timeout"]}(),function(){"use strict";function e(e,a){function t(e,a){$.fn.sortable&&a.sortable({connectWith:"[portlet]",items:"div.panel",handle:".portlet-handler",opacity:.7,placeholder:"portlet box-placeholder",cancel:".portlet-cancel",forcePlaceholderSize:!0,iframeFix:!1,tolerance:"pointer",helper:"original",revert:200,forceHelperSize:!0,update:o,create:n})}function o(t){var o=t.target,n=angular.fromJson(a[r]);n||(n={}),n[o.id]=$(o).sortable("toArray"),n&&e(function(){a[r]=angular.toJson(n)})}function n(e){var t=e.target,o=angular.fromJson(a[r]);if(o){var n=t.id,i=o[n];if(i){var l=$("#"+n);$.each(i,function(e,a){$("#"+a).appendTo(l)})}}}var r="portletState";return{restrict:"A",link:t}}angular.module("app.panels").directive("portlet",e),e.$inject=["$timeout","$localStorage"]}(),function(){"use strict";function e(e,a,t){function o(o,n){function r(){var e=100-c;c+=.015*Math.pow(1-Math.sqrt(e),2),o.loadCounter=parseInt(c,10),s=a(r,20)}function i(){a.cancel(s),o.loadCounter=100,a(function(){e.addClass(n,"preloader-hidden"),angular.element("body").css("overflow","")},300)}function l(){var e=t.defer(),n=0,r=o.$on("$viewContentLoaded",function(){n++,2===n&&(a(function(){e.resolve()},3e3),r())});return e.promise}o.loadCounter=0;var s,c=0;angular.element("body").css("overflow","hidden"),n.addClass("preloader"),l().then(i),s=a(r)}var n={restrict:"EAC",template:'<div class="preloader-progress"><div class="preloader-progress-bar" ng-style="{width: loadCounter + \'%\'}"></div></div>',link:o};return n}angular.module("app.preloader").directive("preloader",e),e.$inject=["$animate","$timeout","$q"]}(),function(){"use strict";function e(e){function a(e){return"app/views/"+e}function t(){var a=arguments;return{deps:["$ocLazyLoad","$q",function(t,o){function n(e){return"function"==typeof e?i.then(e):i.then(function(){var a=r(e);return a?t.load(a):$.error("Route resolve: Bad resource name ["+e+"]")})}function r(a){if(e.modules)for(var t in e.modules)if(e.modules[t].name&&e.modules[t].name===a)return e.modules[t];return e.scripts&&e.scripts[a]}for(var i=o.when(1),l=0,s=a.length;s>l;l++)i=n(a[l]);return i}]}}return{basepath:a,resolveFor:t,$get:function(){return{basepath:a,resolveFor:t}}}}angular.module("app.routes").provider("RouteHelpers",e),e.$inject=["APP_REQUIRES"]}(),function(){"use strict";function e(e,a,t,o){a.html5Mode(!1),t.otherwise("/app/dashboard"),e.state("app",{url:"/app","abstract":!0,templateUrl:o.basepath("app.html"),resolve:o.resolveFor("fastclick","modernizr","icons","screenfull","animo","sparklines","slimscroll","classyloader","toaster","whirl")}).state("app.dashboard",{url:"/dashboard",title:"Dashboard",templateUrl:o.basepath("dashboard.html"),resolve:o.resolveFor("flot-chart","flot-chart-plugins","weather-icons")}).state("app.dashboard_v2",{url:"/dashboard_v2",title:"Dashboard v2",templateUrl:o.basepath("dashboard_v2.html"),controller:"DashboardV2Controller",controllerAs:"dash2",resolve:o.resolveFor("flot-chart","flot-chart-plugins")}).state("app.dashboard_v3",{url:"/dashboard_v3",title:"Dashboard v3",controller:"DashboardV3Controller",controllerAs:"dash3",templateUrl:o.basepath("dashboard_v3.html"),resolve:o.resolveFor("flot-chart","flot-chart-plugins","vector-map","vector-map-maps")}).state("app.widgets",{url:"/widgets",title:"Widgets",templateUrl:o.basepath("widgets.html"),resolve:o.resolveFor("loadGoogleMapsJS",function(){return loadGoogleMaps()},"ui.map")}).state("app.buttons",{url:"/buttons",title:"Buttons",templateUrl:o.basepath("buttons.html")}).state("app.colors",{url:"/colors",title:"Colors",templateUrl:o.basepath("colors.html")}).state("app.localization",{url:"/localization",title:"Localization",templateUrl:o.basepath("localization.html")}).state("app.infinite-scroll",{url:"/infinite-scroll",title:"Infinite Scroll",templateUrl:o.basepath("infinite-scroll.html"),resolve:o.resolveFor("infinite-scroll")}).state("app.navtree",{url:"/navtree",title:"Nav Tree",templateUrl:o.basepath("nav-tree.html"),resolve:o.resolveFor("angularBootstrapNavTree")}).state("app.nestable",{url:"/nestable",title:"Nestable",templateUrl:o.basepath("nestable.html"),resolve:o.resolveFor("ng-nestable")}).state("app.sortable",{url:"/sortable",title:"Sortable",templateUrl:o.basepath("sortable.html"),resolve:o.resolveFor("htmlSortable")}).state("app.notifications",{url:"/notifications",title:"Notifications",templateUrl:o.basepath("notifications.html")}).state("app.carousel",{url:"/carousel",title:"Carousel",templateUrl:o.basepath("carousel.html"),resolve:o.resolveFor("angular-carousel")}).state("app.ngdialog",{url:"/ngdialog",title:"ngDialog",templateUrl:o.basepath("ngdialog.html"),resolve:angular.extend(o.resolveFor("ngDialog"),{tpl:function(){return{path:o.basepath("ngdialog-template.html")}}}),controller:"DialogIntroCtrl"}).state("app.sweetalert",{url:"/sweetalert",title:"SweetAlert",templateUrl:o.basepath("sweetalert.html"),resolve:o.resolveFor("oitozero.ngSweetAlert")}).state("app.tour",{url:"/tour",title:"Tour",templateUrl:o.basepath("tour.html"),resolve:o.resolveFor("bm.bsTour")}).state("app.interaction",{url:"/interaction",title:"Interaction",templateUrl:o.basepath("interaction.html")}).state("app.spinners",{url:"/spinners",title:"Spinners",templateUrl:o.basepath("spinners.html"),resolve:o.resolveFor("loaders.css","spinkit")}).state("app.dropdown-animations",{url:"/dropdown-animations",title:"Dropdown Animations",templateUrl:o.basepath("dropdown-animations.html")}).state("app.panels",{url:"/panels",title:"Panels",templateUrl:o.basepath("panels.html")}).state("app.portlets",{url:"/portlets",title:"Portlets",templateUrl:o.basepath("portlets.html"),resolve:o.resolveFor("jquery-ui","jquery-ui-widgets")}).state("app.maps-google",{url:"/maps-google",title:"Maps Google",templateUrl:o.basepath("maps-google.html"),resolve:o.resolveFor("loadGoogleMapsJS",function(){return loadGoogleMaps()},"ui.map")}).state("app.maps-vector",{url:"/maps-vector",title:"Maps Vector",templateUrl:o.basepath("maps-vector.html"),controller:"VectorMapController",controllerAs:"vmap",resolve:o.resolveFor("vector-map","vector-map-maps")}).state("app.grid",{url:"/grid",title:"Grid",templateUrl:o.basepath("grid.html")}).state("app.grid-masonry",{url:"/grid-masonry",title:"Grid Masonry",templateUrl:o.basepath("grid-masonry.html")}).state("app.grid-masonry-deck",{url:"/grid-masonry-deck",title:"Grid Masonry",templateUrl:o.basepath("grid-masonry-deck.html"),resolve:o.resolveFor("spinkit","akoenig.deckgrid")}).state("app.typo",{url:"/typo",title:"Typo",templateUrl:o.basepath("typo.html")}).state("app.icons-font",{url:"/icons-font",title:"Icons Font",templateUrl:o.basepath("icons-font.html"),resolve:o.resolveFor("icons")}).state("app.icons-weather",{url:"/icons-weather",title:"Icons Weather",templateUrl:o.basepath("icons-weather.html"),resolve:o.resolveFor("weather-icons","skycons")}).state("app.form-standard",{url:"/form-standard",title:"Form Standard",templateUrl:o.basepath("form-standard.html")}).state("app.form-extended",{url:"/form-extended",title:"Form Extended",templateUrl:o.basepath("form-extended.html"),resolve:o.resolveFor("colorpicker.module","codemirror","moment","taginput","inputmask","localytics.directives","ui.bootstrap-slider","ngWig","filestyle","textAngular")}).state("app.form-validation",{url:"/form-validation",title:"Form Validation",templateUrl:o.basepath("form-validation.html"),resolve:o.resolveFor("ui.select","taginput","inputmask","localytics.directives")}).state("app.form-parsley",{url:"/form-parsley",title:"Form Validation - Parsley",templateUrl:o.basepath("form-parsley.html"),resolve:o.resolveFor("parsley")}).state("app.form-wizard",{url:"/form-wizard",title:"Form Wizard",templateUrl:o.basepath("form-wizard.html"),resolve:o.resolveFor("parsley")}).state("app.form-upload",{url:"/form-upload",title:"Form upload",templateUrl:o.basepath("form-upload.html"),resolve:o.resolveFor("angularFileUpload","filestyle")}).state("app.form-xeditable",{url:"/form-xeditable",templateUrl:o.basepath("form-xeditable.html"),resolve:o.resolveFor("xeditable")}).state("app.form-imagecrop",{url:"/form-imagecrop",templateUrl:o.basepath("form-imagecrop.html"),resolve:o.resolveFor("ngImgCrop","filestyle")}).state("app.form-uiselect",{url:"/form-uiselect",templateUrl:o.basepath("form-uiselect.html"),controller:"uiSelectController",controllerAs:"uisel",resolve:o.resolveFor("ui.select")}).state("app.chart-flot",{url:"/chart-flot",title:"Chart Flot",templateUrl:o.basepath("chart-flot.html"),resolve:o.resolveFor("flot-chart","flot-chart-plugins")}).state("app.chart-radial",{url:"/chart-radial",title:"Chart Radial",templateUrl:o.basepath("chart-radial.html"),resolve:o.resolveFor("classyloader","ui.knob","easypiechart")}).state("app.chart-js",{url:"/chart-js",title:"Chart JS",templateUrl:o.basepath("chart-js.html"),resolve:o.resolveFor("chartjs")}).state("app.chart-rickshaw",{url:"/chart-rickshaw",title:"Chart Rickshaw",templateUrl:o.basepath("chart-rickshaw.html"),resolve:o.resolveFor("angular-rickshaw")}).state("app.chart-morris",{url:"/chart-morris",title:"Chart Morris",templateUrl:o.basepath("chart-morris.html"),resolve:o.resolveFor("morris")}).state("app.chart-chartist",{url:"/chart-chartist",title:"Chart Chartist",templateUrl:o.basepath("chart-chartist.html"),resolve:o.resolveFor("angular-chartist")}).state("app.table-standard",{url:"/table-standard",title:"Table Standard",templateUrl:o.basepath("table-standard.html")}).state("app.table-extended",{url:"/table-extended",title:"Table Extended",templateUrl:o.basepath("table-extended.html")}).state("app.table-datatable",{url:"/table-datatable",title:"Table Datatable",templateUrl:o.basepath("table-datatable.html"),resolve:o.resolveFor("datatables")}).state("app.table-xeditable",{url:"/table-xeditable",templateUrl:o.basepath("table-xeditable.html"),resolve:o.resolveFor("xeditable")}).state("app.table-ngtable",{url:"/table-ngtable",templateUrl:o.basepath("table-ngtable.html"),resolve:o.resolveFor("ngTable","ngTableExport")}).state("app.table-uigrid",{url:"/table-uigrid",templateUrl:o.basepath("table-uigrid.html"),resolve:o.resolveFor("ui.grid")}).state("app.table-angulargrid",{url:"/table-angulargrid",templateUrl:o.basepath("table-angulargrid.html"),resolve:o.resolveFor("angularGrid")}).state("app.timeline",{url:"/timeline",title:"Timeline",templateUrl:o.basepath("timeline.html")}).state("app.calendar",{url:"/calendar",title:"Calendar",templateUrl:o.basepath("calendar.html"),resolve:o.resolveFor("jquery-ui","jquery-ui-widgets","moment","fullcalendar")}).state("app.invoice",{url:"/invoice",title:"Invoice",templateUrl:o.basepath("invoice.html")}).state("app.search",{url:"/search",title:"Search",templateUrl:o.basepath("search.html"),resolve:o.resolveFor("moment","localytics.directives","ui.bootstrap-slider")}).state("app.todo",{url:"/todo",title:"Todo List",templateUrl:o.basepath("todo.html"),controller:"TodoController",controllerAs:"todo"}).state("app.profile",{url:"/profile",title:"Profile",templateUrl:o.basepath("profile.html"),resolve:o.resolveFor("loadGoogleMapsJS",function(){return loadGoogleMaps()},"ui.map")}).state("app.code-editor",{url:"/code-editor",templateUrl:o.basepath("code-editor.html"),controller:"CodeEditorController",controllerAs:"coder",resolve:{deps:o.resolveFor("codemirror","ui.codemirror","codemirror-modes-web","angularBootstrapNavTree").deps,filetree:["LoadTreeService",function(e){return e.get().$promise.then(function(e){return e.data})}]}}).state("app.template",{url:"/template",title:"Blank Template",templateUrl:o.basepath("template.html")}).state("app.documentation",{url:"/documentation",title:"Documentation",templateUrl:o.basepath("documentation.html"),resolve:o.resolveFor("flatdoc")}).state("app.forum",{url:"/forum",title:"Forum",templateUrl:o.basepath("forum.html")}).state("app.forum-topics",{url:"/forum/topics/:catid",title:"Forum Topics",templateUrl:o.basepath("forum-topics.html")}).state("app.forum-discussion",{url:"/forum/discussion/:topid",title:"Forum Discussion",templateUrl:o.basepath("forum-discussion.html")}).state("app.blog",{url:"/blog",title:"Blog",templateUrl:o.basepath("blog.html"),resolve:o.resolveFor("angular-jqcloud")}).state("app.blog-post",{url:"/post",title:"Post",templateUrl:o.basepath("blog-post.html"),resolve:o.resolveFor("angular-jqcloud")}).state("app.articles",{url:"/articles",title:"Articles",templateUrl:o.basepath("blog-articles.html"),resolve:o.resolveFor("datatables")}).state("app.article-view",{url:"/article/:id",title:"Article View",templateUrl:o.basepath("blog-article-view.html"),resolve:o.resolveFor("ui.select","textAngular")}).state("app.orders",{url:"/orders",title:"Orders",templateUrl:o.basepath("ecommerce-orders.html"),resolve:o.resolveFor("datatables")}).state("app.order-view",{url:"/order-view",title:"Order View",templateUrl:o.basepath("ecommerce-order-view.html")}).state("app.products",{url:"/products",title:"Products",templateUrl:o.basepath("ecommerce-products.html"),resolve:o.resolveFor("datatables")}).state("app.product-view",{url:"/product/:id",title:"Product View",templateUrl:o.basepath("ecommerce-product-view.html")}).state("app.mailbox",{url:"/mailbox",title:"Mailbox","abstract":!0,templateUrl:o.basepath("mailbox.html")}).state("app.mailbox.folder",{url:"/folder/:folder",title:"Mailbox",templateUrl:o.basepath("mailbox-inbox.html")}).state("app.mailbox.view",{url:"/{mid:[0-9]{1,4}}",title:"View mail",templateUrl:o.basepath("mailbox-view.html"),resolve:o.resolveFor("ngWig")}).state("app.mailbox.compose",{url:"/compose",title:"Mailbox",templateUrl:o.basepath("mailbox-compose.html"),resolve:o.resolveFor("ngWig")}).state("app.multilevel",{url:"/multilevel",title:"Multilevel",template:'<h3>Multilevel Views</h3><div class="lead ba p">View @ Top Level <div ui-view=""></div> </div>'}).state("app.multilevel.level1",{url:"/level1",title:"Multilevel - Level1",template:'<div class="lead ba p">View @ Level 1<div ui-view=""></div> </div>'}).state("app.multilevel.level1.item",{url:"/item",title:"Multilevel - Level1",template:'<div class="lead ba p"> Menu item @ Level 1</div>'}).state("app.multilevel.level1.level2",{url:"/level2",title:"Multilevel - Level2",template:'<div class="lead ba p">View @ Level 2<div ui-view=""></div> </div>'}).state("app.multilevel.level1.level2.level3",{url:"/level3",title:"Multilevel - Level3",template:'<div class="lead ba p">View @ Level 3<div ui-view=""></div> </div>'}).state("app.multilevel.level1.level2.level3.item",{url:"/item",title:"Multilevel - Level3 Item",template:'<div class="lead ba p"> Menu item @ Level 3</div>'}).state("page",{url:"/page",templateUrl:"app/pages/page.html",resolve:o.resolveFor("modernizr","icons"),controller:["$rootScope",function(e){e.app.layout.isBoxed=!1}]}).state("page.login",{url:"/login",title:"Login",templateUrl:"app/pages/login.html"}).state("page.register",{url:"/register",title:"Register",templateUrl:"app/pages/register.html"}).state("page.recover",{url:"/recover",title:"Recover",templateUrl:"app/pages/recover.html"}).state("page.lock",{url:"/lock",title:"Lock",templateUrl:"app/pages/lock.html"}).state("page.404",{url:"/404",title:"Not Found",templateUrl:"app/pages/404.html"}).state("app-h",{url:"/app-h","abstract":!0,templateUrl:o.basepath("app-h.html"),resolve:o.resolveFor("fastclick","modernizr","icons","screenfull","animo","sparklines","slimscroll","classyloader","toaster","whirl")}).state("app-h.dashboard_v2",{url:"/dashboard_v2",title:"Dashboard v2",templateUrl:o.basepath("dashboard_v2.html"),controller:"DashboardV2Controller",controllerAs:"dash2",resolve:o.resolveFor("flot-chart","flot-chart-plugins")})}angular.module("app.routes").config(e),e.$inject=["$stateProvider","$locationProvider","$urlRouterProvider","RouteHelpersProvider"]}(),function(){"use strict";function e(e,a){e.app={name:"Angle",description:"Angular Bootstrap Admin Template",year:(new Date).getFullYear(),layout:{isFixed:!0,isCollapsed:!1,isBoxed:!1,isRTL:!1,horizontal:!1,isFloat:!1,asideHover:!1,theme:null,asideScrollbar:!1},useFullLayout:!1,hiddenFooter:!1,offsidebarOpen:!1,asideToggled:!1,viewAnimation:"ng-fadeInUp"},e.app.layout.horizontal="app-h"===e.$stateParams.layout,angular.isDefined(a.layout)?e.app.layout=a.layout:a.layout=e.app.layout,e.$watch("app.layout",function(){a.layout=e.app.layout},!0),e.$watch("app.layout.isCollapsed",function(a){a===!1&&e.$broadcast("closeSidebarMenu")})}angular.module("app.settings").run(e),e.$inject=["$rootScope","$localStorage"]}(),function(){"use strict";function e(e,a,t,o,n){function r(){function r(e){a.menuItems=e}function i(e){if(e){if(e.sref&&"#"!==e.sref)return t.is(e.sref)||t.includes(e.sref);var a=!1;return angular.forEach(e.submenu,function(e){i(e)&&(a=!0)}),a}}function l(e){e+="";for(var a in c)(0>e||e.indexOf(a)<0)&&(c[a]=!0)}function s(e){return"string"==typeof e&&!(e.indexOf("-")<0)}var c=[];e.$watch("app.layout.asideHover",function(e,a){a===!1&&e===!0&&l(-1)}),o.getMenu(r),a.getMenuItemPropClasses=function(e){return(e.heading?"nav-heading":"")+(i(e)?" active":"")},a.addCollapse=function(a,t){c[a]=e.app.layout.asideHover?!0:!i(t)},a.isCollapse=function(e){return c[e]},a.toggleCollapse=function(t,o){return n.isSidebarCollapsed()||e.app.layout.asideHover?!0:(angular.isDefined(c[t])?a.lastEventFromChild||(c[t]=!c[t],l(t)):o&&l(-1),a.lastEventFromChild=s(t),!0)}}r()}angular.module("app.sidebar").controller("SidebarController",e),e.$inject=["$rootScope","$scope","$state","SidebarLoader","Utils"]}(),function(){"use strict";function e(e,a,t,o){function n(t,n,i){function u(e){e===!0?a(function(){h.on(v,function(e){$(e.target).parents(".aside").length||d()})}):h.off(v)}function d(){e.app.asideToggled=!1,t.$$phase||t.$apply()}var p=e.$state.current.name,m=n,g=o.isTouch()?"click":"mouseenter",f=$();if(m.on(g,".nav > li",function(){(o.isSidebarCollapsed()||e.app.layout.asideHover)&&(f.trigger("mouseleave"),f=l($(this),m),r())}),t.$on("closeSidebarMenu",function(){s()}),c.on("resize",function(){o.isMobile()||d()}),e.$on("$stateChangeStart",function(a,t){p=t.name,d(),e.$broadcast("closeSidebarMenu")}),angular.isDefined(i.sidebarAnyclickClose)){var h=$(".wrapper"),v="click.sidebar";e.$watch("app.asideToggled",u)}}function r(){var e=$("<div/>",{"class":"dropdown-backdrop"});e.insertAfter(".aside-inner").on("click mouseenter",function(){s()})}function i(e){e.siblings("li").removeClass("open").end().toggleClass("open")}function l(a,t){s();var o=a.children("ul");if(!o.length)return $();if(a.hasClass("open"))return i(a),$();var n=$(".aside"),r=$(".aside-inner"),l=parseInt(r.css("padding-top"),0)+parseInt(n.css("padding-top"),0),u=o.clone().appendTo(n);i(a);var d=a.position().top+l-t.scrollTop(),p=c.height();return u.addClass("nav-floating").css({position:e.app.layout.isFixed?"fixed":"absolute",top:d,bottom:u.outerHeight(!0)+d>p?0:"auto"}),u.on("mouseleave",function(){i(a),u.remove()}),u}function s(){$(".dropdown-backdrop").remove(),$(".sidebar-subnav.nav-floating").remove(),$(".sidebar li.open").removeClass("open")}var c=angular.element(t),u={link:n,restrict:"EA",template:'<nav class="sidebar" ng-transclude></nav>',transclude:!0,replace:!0};return u}angular.module("app.sidebar").directive("sidebar",e),e.$inject=["$rootScope","$timeout","$window","Utils"]}(),function(){"use strict";function e(e){function a(a,t){var o="server/sidebar-menu.json",n=o+"?v="+(new Date).getTime();t=t||function(){alert("Failure loading menu")},e.get(n).success(a).error(t)}this.getMenu=a}angular.module("app.sidebar").service("SidebarLoader",e),e.$inject=["$http"]}(),function(){"use strict";function e(e,a){function t(){e.user={name:"John",job:"ng-developer",picture:"app/img/user/02.jpg"},e.toggleUserBlock=function(){e.$broadcast("toggleUserBlock")},e.userBlockVisible=!0;var t=e.$on("toggleUserBlock",function(){e.userBlockVisible=!e.userBlockVisible});a.$on("$destroy",t)}t()}angular.module("app.sidebar").controller("UserBlockController",e),e.$inject=["$rootScope","$scope"]}(),function(){"use strict";function e(e){function a(){var a=[{headerName:"Athlete",field:"athlete",width:150},{headerName:"Age",field:"age",width:90},{headerName:"Country",field:"country",width:120},{headerName:"Year",field:"year",width:90},{headerName:"Date",field:"date",width:110},{headerName:"Sport",field:"sport",width:110},{headerName:"Gold",field:"gold",width:100},{headerName:"Silver",field:"silver",width:100},{headerName:"Bronze",field:"bronze",width:100},{headerName:"Total",field:"total",width:100}];t.gridOptions={columnDefs:a,rowData:null,ready:function(e){e.sizeColumnsToFit()}};var o=["John Joe Nevin","Katie Taylor","Paddy Barnes","Kenny Egan","Darren Sutherland","Margaret Thatcher","Tony Blair","Ronald Regan","Barack Obama"],n=[{headerName:"Athlete",field:"athlete",width:150,filter:"set",filterParams:{cellHeight:20,values:o}},{headerName:"Age",field:"age",width:90,filter:"number"},{headerName:"Country",field:"country",width:120},{headerName:"Year",field:"year",width:90},{headerName:"Date",field:"date",width:110},{headerName:"Sport",field:"sport",width:110},{headerName:"Gold",field:"gold",width:100,filter:"number"},{headerName:"Silver",field:"silver",width:100,filter:"number"},{headerName:"Bronze",field:"bronze",width:100,filter:"number"},{headerName:"Total",field:"total",width:100,filter:"number"}];t.gridOptions1={columnDefs:n,rowData:null,enableFilter:!0,ready:function(e){e.sizeColumnsToFit()}},t.gridOptions2={columnDefs:a,rowData:null,pinnedColumnCount:2,ready:function(e){e.sizeColumnsToFit()}},e.get("server/ag-owinners.json").then(function(e){t.gridOptions.api.setRowData(e.data),t.gridOptions.api.sizeColumnsToFit(),t.gridOptions1.api.setRowData(e.data),t.gridOptions1.api.sizeColumnsToFit(),t.gridOptions2.api.setRowData(e.data),t.gridOptions2.api.sizeColumnsToFit()})}var t=this;a()}angular.module("app.tables").controller("AngularGridController",e),e.$inject=["$http"]}(),function(){"use strict";function e(e,a,t){function o(){function o(e){return{id:e,firstName:"Foo"+e,lastName:"Bar"+e}}function r(){n.heroes.push(angular.copy(n.person2Add)),n.person2Add=o(n.person2Add.id+1)}function i(e){n.heroes.splice(e,1,angular.copy(n.person2Add)),n.person2Add=o(n.person2Add.id+1)}function l(e){n.heroes.splice(e,1)}e("server/datatable.json").query().$promise.then(function(e){n.persons=e}),n.heroes=[{id:860,firstName:"Superman",lastName:"Yoda"},{id:870,firstName:"Ace",lastName:"Ventura"},{id:590,firstName:"Flash",lastName:"Gordon"},{id:803,firstName:"Luke",lastName:"Skywalker"}],n.dtOptions=a.newOptions().withPaginationType("full_numbers"),n.dtColumnDefs=[t.newColumnDef(0),t.newColumnDef(1),t.newColumnDef(2),t.newColumnDef(3).notSortable()],n.person2Add=o(1),n.addPerson=r,n.modifyPerson=i,n.removePerson=l}var n=this;o()}angular.module("app.tables").controller("DataTableController",e),e.$inject=["$resource","DTOptionsBuilder","DTColumnDefBuilder"]}(),function(){"use strict";function e(e,a,t){function o(){e.filterOptions={filterText:"",useExternalFilter:!0},e.totalServerItems=0,e.pagingOptions={pageSizes:[250,500,1e3],pageSize:250,currentPage:1},e.gridOptions={data:"myData",enablePaging:!0,showFooter:!0,rowHeight:36,headerRowHeight:38,totalServerItems:"totalServerItems",pagingOptions:e.pagingOptions,filterOptions:e.filterOptions},e.setPagingData=function(a,t,o){var n=a.slice((t-1)*o,t*o);e.myData=n,e.totalServerItems=a.length,e.$$phase||e.$apply()},e.getPagedDataAsync=function(o,n,r){var i="server/ng-grid-data.json";t(function(){if(r){var t=r.toLowerCase();a.get(i).success(function(a){var r=a.filter(function(e){return-1!==JSON.stringify(e).toLowerCase().indexOf(t)});e.setPagingData(r,n,o)})}else a.get(i).success(function(a){e.setPagingData(a,n,o)})},100)},e.$watch("pagingOptions",function(a,t){a!==t&&a.currentPage!==t.currentPage&&e.getPagedDataAsync(e.pagingOptions.pageSize,e.pagingOptions.currentPage,e.filterOptions.filterText)},!0),e.$watch("filterOptions",function(a,t){a!==t&&e.getPagedDataAsync(e.pagingOptions.pageSize,e.pagingOptions.currentPage,e.filterOptions.filterText)},!0),e.getPagedDataAsync(e.pagingOptions.pageSize,e.pagingOptions.currentPage)}o()}angular.module("app.tables").controller("NGGridController",e),e.$inject=["$scope","$http","$timeout"]}(),function(){"use strict";function e(){function e(e,t,o){function n(e,t){var o=(t.page()-1)*t.count(),n=t.page()*t.count(),r=a.cache.result.slice(o,n);t.total(a.cache.total),e.resolve(r)}a.cache?n(e,t):o&&o.get(function(o){a.cache=o,n(e,t)})}var a=this;this.cache=null,this.getData=e}angular.module("app.tables").service("ngTableDataService",e)}(),function(){"use strict";function e(e,a,t,o,n){function r(){var o=[{name:"Moroni",age:50,money:-10},{name:"Tiancum",age:43,money:120},{name:"Jacob",age:27,money:5.5},{name:"Nephi",age:29,money:-54},{name:"Enos",age:34,money:110},{name:"Tiancum",age:43,money:1e3},{name:"Jacob",age:27,money:-201},{name:"Nephi",age:29,money:100},{name:"Enos",age:34,money:-52.5},{name:"Tiancum",age:43,money:52.1},{name:"Jacob",age:27,money:110},{name:"Nephi",age:29,money:-55},{name:"Enos",age:34,money:551},{name:"Tiancum",age:43,money:-1410},{name:"Jacob",age:27,money:410},{name:"Nephi",age:29,money:100},{name:"Enos",age:34,money:-100}];i.data=o,i.tableParams3=new a({page:1,count:10},{total:o.length,getData:function(a,t){var n=t.filter()?e("filter")(o,t.filter()):o,r=t.sorting()?e("orderBy")(n,t.orderBy()):o;t.total(r.length),a.resolve(r.slice((t.page()-1)*t.count(),t.page()*t.count()))}}),i.changeSelection=function(e){console.info(e)};var r=[{name:"Moroni",age:50},{name:"Tiancum",age:43},{name:"Jacob",age:27},{name:"Nephi",age:29},{name:"Enos",age:34},{name:"Tiancum",age:43},{name:"Jacob",age:27},{name:"Nephi",age:29},{name:"Enos",age:34},{name:"Tiancum",age:43},{name:"Jacob",age:27},{name:"Nephi",age:29},{name:"Enos",age:34},{name:"Tiancum",age:43},{name:"Jacob",age:27},{name:"Nephi",age:29},{name:"Enos",age:34}];i.tableParams4=new a({page:1,count:10},{total:r.length,getData:function(e,a){e.resolve(r.slice((a.page()-1)*a.count(),a.page()*a.count()))}}),i.tableParams=new a({page:1,count:10,sorting:{name:"asc"}},{total:o.length,getData:function(a,t){var n=t.sorting()?e("orderBy")(o,t.orderBy()):o;a.resolve(n.slice((t.page()-1)*t.count(),t.page()*t.count()))}}),i.tableParams2=new a({page:1,count:10,filter:{name:"",age:""}},{total:o.length,getData:function(a,t){var n=t.filter()?e("filter")(o,t.filter()):o;i.users=n.slice((t.page()-1)*t.count(),t.page()*t.count()),t.total(n.length),a.resolve(i.users)}});var l=t("server/table-data.json");i.tableParams5=new a({page:1,count:10},{total:0,counts:[],getData:function(e,a){n.getData(e,a,l)}})}var i=this;i.title="Controller",r()}angular.module("app.tables").controller("NGTableCtrl",e),e.$inject=["$filter","ngTableParams","$resource","$timeout","ngTableDataService"]}(),function(){"use strict";function e(e,a,t,o,n){function r(){i.users=[{id:1,name:"awesome user1",status:2,group:4,groupName:"admin"},{id:2,name:"awesome user2",status:void 0,group:3,groupName:"vip"},{id:3,name:"awesome user3",status:2,group:null}],i.statuses=[{value:1,text:"status1"},{value:2,text:"status2"},{value:3,text:"status3"},{value:4,text:"status4"}],i.groups=[],i.loadGroups=function(){return i.groups.length?null:a.get("server/xeditable-groups.json").success(function(e){i.groups=e})},i.showGroup=function(a){if(a.group&&i.groups.length){var t=e("filter")(i.groups,{id:a.group});return t.length?t[0].text:"Not set"}return a.groupName||"Not set"},i.showStatus=function(a){var t=[];return a.status&&(t=e("filter")(i.statuses,{value:a.status})),t.length?t[0].text:"Not set"},i.checkName=function(e,a){return 2===a&&"awesome"!==e?"Username 2 should be `awesome`":void 0},i.saveUser=function(e,a){angular.extend(e,{id:a}),console.log("Saving user: "+a)},i.removeUser=function(e){i.users.splice(e,1)},i.addUser=function(){i.inserted={id:i.users.length+1,name:"",status:null,group:null,isNew:!0},i.users.push(i.inserted)},i.saveColumn=function(e){var a=[];return angular.forEach(i.users,function(){console.log("Saving column: "+e)}),n.all(a)},i.filterUser=function(e){return e.isDeleted!==!0},i.deleteUser=function(a){var t=e("filter")(i.users,{id:a});t.length&&(t[0].isDeleted=!0)},i.cancel=function(){for(var e=i.users.length;e--;){var a=i.users[e];a.isDeleted&&delete a.isDeleted,a.isNew&&i.users.splice(e,1)}},i.saveTable=function(){for(var e=[],a=i.users.length;a--;){var t=i.users[a];t.isDeleted&&i.users.splice(a,1),t.isNew&&(t.isNew=!1),console.log("Saving Table...")}return n.all(e)}}var i=this;r()}angular.module("app.tables").controller("TablexEditableController",e),e.$inject=["$filter","$http","editableOptions","editableThemes","$q"]}(),function(){"use strict";function e(e,a){function t(){o.gridOptions={rowHeight:34,data:[{name:"Wilder Gonzales",gender:"male",company:"Geekko"},{name:"Georgina Schultz",gender:"female",company:"Suretech"},{name:"Carroll Buchanan",gender:"male",company:"Ecosys"},{name:"Valarie Atkinson",gender:"female",company:"Hopeli"},{name:"Schroeder Mathews",gender:"male",company:"Polarium"},{name:"Ethel Price",gender:"female",company:"Enersol"},{name:"Claudine Neal",gender:"female",company:"Sealoud"},{name:"Beryl Rice",gender:"female",company:"Velity"},{name:"Lynda Mendoza",gender:"female",company:"Dogspa"},{name:"Sarah Massey",gender:"female",company:"Bisba"},{name:"Robles Boyle",gender:"male",company:"Comtract"},{name:"Evans Hickman",gender:"male",company:"Parleynet"},{name:"Dawson Barber",gender:"male",company:"Dymi"},{name:"Bruce Strong",gender:"male",company:"Xyqag"},{name:"Nellie Whitfield",gender:"female",company:"Exospace"},{name:"Jackson Macias",gender:"male",company:"Aquamate"},{name:"Pena Pena",gender:"male",company:"Quarx"},{name:"Lelia Gates",gender:"female",company:"Proxsoft"},{name:"Letitia Vasquez",gender:"female",company:"Slumberia"},{name:"Trevino Moreno",gender:"male",company:"Conjurica"}]};var t=[];o.gridOptionsComplex={showGridFooter:!0,showColumnFooter:!0,enableFiltering:!0,columnDefs:[{field:"name",width:"13%"},{field:"address.street",aggregationType:e.aggregationTypes.sum,width:"13%"},{field:"age",aggregationType:e.aggregationTypes.avg,aggregationHideLabel:!0,width:"13%"},{name:"ageMin",field:"age",aggregationType:e.aggregationTypes.min,width:"13%",displayName:"Age for min"},{name:"ageMax",field:"age",aggregationType:e.aggregationTypes.max,width:"13%",displayName:"Age for max"},{name:"customCellTemplate",field:"age",width:"14%",footerCellTemplate:'<div class="ui-grid-cell-contents bg-info text-center">Custom HTML</div>'},{name:"registered",field:"registered",width:"20%",cellFilter:"date",footerCellFilter:"date",aggregationType:e.aggregationTypes.max}],data:t,onRegisterApi:function(e){o.gridApi=e}},a.get("server/uigrid-complex.json").success(function(e){e.forEach(function(e){e.registered=Date.parse(e.registered)}),o.gridOptionsComplex.data=e}),o.gridOptions1={paginationPageSizes:[25,50,75],paginationPageSize:25,columnDefs:[{name:"name"},{name:"gender"},{name:"company"}]},a.get("server/uigrid-100.json").success(function(e){o.gridOptions1.data=e})}var o=this;t()}angular.module("app.tables").controller("UIGridController",e),e.$inject=["uiGridConstants","$http"]}(),function(){"use strict";function e(e){
e.useStaticFilesLoader({prefix:"app/i18n/",suffix:".json"}),e.preferredLanguage("en"),e.useLocalStorage(),e.usePostCompiling(!0),e.useSanitizeValueStrategy("sanitizeParameters")}angular.module("app.translate").config(e),e.$inject=["$translateProvider"]}(),function(){"use strict";function e(e,a){e.language={listIsOpen:!1,available:{en:"English",es_AR:"Español"},init:function(){var t=a.proposedLanguage()||a.use(),o=a.preferredLanguage();e.language.selected=e.language.available[t||o]},set:function(t){a.use(t),e.language.selected=e.language.available[t],e.language.listIsOpen=!e.language.listIsOpen}},e.language.init()}angular.module("app.translate").run(e),e.$inject=["$rootScope","$translate"]}(),function(){"use strict";function e(e){function a(a,t,o){a.$watch(function(){return a.$eval(o.animateEnabled,a)},function(a){e.enabled(!!a,t)})}var t={link:a,restrict:"A"};return t}angular.module("app.utils").directive("animateEnabled",e),e.$inject=["$animate"]}(),function(){"use strict";function e(e){return e.jQBrowser}angular.module("app.utils").service("Browser",e),e.$inject=["$window"]}(),function(){"use strict";function e(e,a){function t(t,o){o.on("click",function(o){o.preventDefault(),t.resetKey?(delete a[t.resetKey],e.go(e.current,{},{reload:!0})):$.error("No storage key specified for reset.")})}var o={link:t,restrict:"A",scope:{resetKey:"@"}};return o}angular.module("app.utils").directive("resetKey",e),e.$inject=["$state","$localStorage"]}(),function(){"use strict";function e(e){function a(a,t){e.msie?t.addClass("hide"):t.on("click",function(e){e.preventDefault(),screenfull.enabled?(screenfull.toggle(),screenfull.isFullscreen?$(this).children("em").removeClass("fa-expand").addClass("fa-compress"):$(this).children("em").removeClass("fa-compress").addClass("fa-expand")):$.error("Fullscreen not enabled")})}var t={link:a,restrict:"A"};return t}angular.module("app.utils").directive("toggleFullscreen",e),e.$inject=["Browser"]}(),function(){"use strict";function e(){function e(e,t,o){t.on("click",function(e){t.is("a")&&e.preventDefault();var n,r=o.loadCss;r?(n=a(r),n||$.error("Error creating stylesheet link element.")):$.error("No stylesheet location defined.")})}function a(e){var a="autoloaded-stylesheet",t=$("#"+a).attr("id",a+"-old");return $("head").append($("<link/>").attr({id:a,rel:"stylesheet",href:e})),t.length&&t.remove(),$("#"+a)}var t={link:e,restrict:"A"};return t}angular.module("app.utils").directive("loadCss",e)}(),function(){"use strict";function e(e,a){function t(t,o,n){function r(){var a=e(new Date,i);o.text(a)}var i=n.format;r();var l=a(r,1e3);t.$on("$destroy",function(){a.cancel(l)})}var o={link:t,restrict:"EA"};return o}angular.module("app.utils").directive("now",e),e.$inject=["dateFilter","$interval"]}(),function(){"use strict";function e(){function e(e,a){a.on("change",function(){var e=$(this),a=e.index()+1,t=e.find('input[type="checkbox"]'),o=e.parents("table");o.find("tbody > tr > td:nth-child("+a+') input[type="checkbox"]').prop("checked",t[0].checked)})}var a={link:e,restrict:"A"};return a}angular.module("app.utils").directive("checkAll",e)}(),function(){"use strict";function e(e,a){function t(t,o){o.on("click",function(){a(function(){var a=document.createEvent("UIEvents");a.initUIEvent("resize",!0,!1,e,0),e.dispatchEvent(a)})})}var o={link:t,restrict:"A"};return o}angular.module("app.utils").directive("triggerResize",e),e.$inject=["$window","$timeout"]}(),function(){"use strict";function e(e,a){var t=angular.element("html"),o=angular.element(e),n=angular.element("body");return{support:{transition:function(){var e=function(){var e,a=document.body||document.documentElement,t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(e in t)if(void 0!==a.style[e])return t[e]}();return e&&{end:e}}(),animation:function(){var e=function(){var e,a=document.body||document.documentElement,t={WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd oanimationend",animation:"animationend"};for(e in t)if(void 0!==a.style[e])return t[e]}();return e&&{end:e}}(),requestAnimationFrame:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||window.oRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)},touch:"ontouchstart"in window&&navigator.userAgent.toLowerCase().match(/mobile|tablet/)||window.DocumentTouch&&document instanceof window.DocumentTouch||window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>0||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>0||!1,mutationobserver:window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver||null},isInView:function(e,a){var t=$(e);if(!t.is(":visible"))return!1;var n=o.scrollLeft(),r=o.scrollTop(),i=t.offset(),l=i.left,s=i.top;return a=$.extend({topoffset:0,leftoffset:0},a),s+t.height()>=r&&s-a.topoffset<=r+o.height()&&l+t.width()>=n&&l-a.leftoffset<=n+o.width()?!0:!1},langdirection:"rtl"===t.attr("dir")?"right":"left",isTouch:function(){return t.hasClass("touch")},isSidebarCollapsed:function(){return n.hasClass("aside-collapsed")},isSidebarToggled:function(){return n.hasClass("aside-toggled")},isMobile:function(){return o.width()<a.tablet}}}angular.module("app.utils").service("Utils",e),e.$inject=["$window","APP_MEDIAQUERY"]}(),function(){"use strict";angular.module("custom",["angle","app.core","app.sidebar"])}(),function(){"use strict";function e(e){function a(){e.log("I'm a line from custom.js")}a()}angular.module("custom").controller("Controller",e),e.$inject=["$log"]}();
//# sourceMappingURL=data:application/json;base64,
